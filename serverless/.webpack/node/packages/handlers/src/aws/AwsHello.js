/*! For license information please see AwsHello.js.LICENSE.txt */
(()=>{var e={3062:(e,t,r)=>{var n={};e.exports=n,n.themes={};var i=r(3837),s=n.styles=r(9534),o=Object.defineProperties,a=new RegExp(/[\r\n]+/g);n.supportsColor=r(6974).supportsColor,void 0===n.enabled&&(n.enabled=!1!==n.supportsColor()),n.enable=function(){n.enabled=!0},n.disable=function(){n.enabled=!1},n.stripColors=n.strip=function(e){return(""+e).replace(/\x1B\[\d+m/g,"")},n.stylize=function(e,t){if(!n.enabled)return e+"";var r=s[t];return!r&&t in n?n[t](e):r.open+e+r.close};var l=/[|\\{}()[\]^$+*?.]/g;function u(e){var t=function e(){return d.apply(e,arguments)};return t._styles=e,t.__proto__=h,t}var c,f=(c={},s.grey=s.gray,Object.keys(s).forEach((function(e){s[e].closeRe=new RegExp(function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(l,"\\$&")}(s[e].close),"g"),c[e]={get:function(){return u(this._styles.concat(e))}}})),c),h=o((function(){}),f);function d(){var e=Array.prototype.slice.call(arguments),t=e.map((function(e){return null!=e&&e.constructor===String?e:i.inspect(e)})).join(" ");if(!n.enabled||!t)return t;for(var r=-1!=t.indexOf("\n"),o=this._styles,l=o.length;l--;){var u=s[o[l]];t=u.open+t.replace(u.closeRe,u.open)+u.close,r&&(t=t.replace(a,(function(e){return u.close+e+u.open})))}return t}n.setTheme=function(e){if("string"!=typeof e)for(var t in e)!function(t){n[t]=function(r){if("object"==typeof e[t]){var i=r;for(var s in e[t])i=n[e[t][s]](i);return i}return n[e[t]](r)}}(t);else console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));")};var p=function(e,t){var r=t.split("");return(r=r.map(e)).join("")};for(var g in n.trap=r(3154),n.zalgo=r(8192),n.maps={},n.maps.america=r(9955)(n),n.maps.zebra=r(9541)(n),n.maps.rainbow=r(4443)(n),n.maps.random=r(7571)(n),n.maps)!function(e){n[e]=function(t){return p(n.maps[e],t)}}(g);o(n,function(){var e={};return Object.keys(f).forEach((function(t){e[t]={get:function(){return u([t])}}})),e}())},3154:e=>{e.exports=function(e,t){var r="";e=(e=e||"Run the trap, drop the bass").split("");var n={a:["@","Ą","Ⱥ","Ʌ","Δ","Λ","Д"],b:["ß","Ɓ","Ƀ","ɮ","β","฿"],c:["©","Ȼ","Ͼ"],d:["Ð","Ɗ","Ԁ","ԁ","Ԃ","ԃ"],e:["Ë","ĕ","Ǝ","ɘ","Σ","ξ","Ҽ","੬"],f:["Ӻ"],g:["ɢ"],h:["Ħ","ƕ","Ң","Һ","Ӈ","Ԋ"],i:["༏"],j:["Ĵ"],k:["ĸ","Ҡ","Ӄ","Ԟ"],l:["Ĺ"],m:["ʍ","Ӎ","ӎ","Ԡ","ԡ","൩"],n:["Ñ","ŋ","Ɲ","Ͷ","Π","Ҋ"],o:["Ø","õ","ø","Ǿ","ʘ","Ѻ","ם","۝","๏"],p:["Ƿ","Ҏ"],q:["্"],r:["®","Ʀ","Ȑ","Ɍ","ʀ","Я"],s:["§","Ϟ","ϟ","Ϩ"],t:["Ł","Ŧ","ͳ"],u:["Ʊ","Ս"],v:["ט"],w:["Ш","Ѡ","Ѽ","൰"],x:["Ҳ","Ӿ","Ӽ","ӽ"],y:["¥","Ұ","Ӌ"],z:["Ƶ","ɀ"]};return e.forEach((function(e){e=e.toLowerCase();var t=n[e]||[" "],i=Math.floor(Math.random()*t.length);r+=void 0!==n[e]?n[e][i]:e})),r}},8192:e=>{e.exports=function(e,t){e=e||"   he is here   ";var r={up:["̍","̎","̄","̅","̿","̑","̆","̐","͒","͗","͑","̇","̈","̊","͂","̓","̈","͊","͋","͌","̃","̂","̌","͐","̀","́","̋","̏","̒","̓","̔","̽","̉","ͣ","ͤ","ͥ","ͦ","ͧ","ͨ","ͩ","ͪ","ͫ","ͬ","ͭ","ͮ","ͯ","̾","͛","͆","̚"],down:["̖","̗","̘","̙","̜","̝","̞","̟","̠","̤","̥","̦","̩","̪","̫","̬","̭","̮","̯","̰","̱","̲","̳","̹","̺","̻","̼","ͅ","͇","͈","͉","͍","͎","͓","͔","͕","͖","͙","͚","̣"],mid:["̕","̛","̀","́","͘","̡","̢","̧","̨","̴","̵","̶","͜","͝","͞","͟","͠","͢","̸","̷","͡"," ҉"]},n=[].concat(r.up,r.down,r.mid);function i(e){return Math.floor(Math.random()*e)}function s(e){var t=!1;return n.filter((function(r){t=r===e})),t}return function(e,t){var n,o,a="";for(o in(t=t||{}).up=void 0===t.up||t.up,t.mid=void 0===t.mid||t.mid,t.down=void 0===t.down||t.down,t.size=void 0!==t.size?t.size:"maxi",e=e.split(""))if(!s(o)){switch(a+=e[o],n={up:0,down:0,mid:0},t.size){case"mini":n.up=i(8),n.mid=i(2),n.down=i(8);break;case"maxi":n.up=i(16)+3,n.mid=i(4)+1,n.down=i(64)+3;break;default:n.up=i(8)+1,n.mid=i(6)/2,n.down=i(8)+1}var l=["up","mid","down"];for(var u in l)for(var c=l[u],f=0;f<=n[c];f++)t[c]&&(a+=r[c][i(r[c].length)])}return a}(e,t)}},9955:e=>{e.exports=function(e){return function(t,r,n){if(" "===t)return t;switch(r%3){case 0:return e.red(t);case 1:return e.white(t);case 2:return e.blue(t)}}}},4443:e=>{e.exports=function(e){var t=["red","yellow","green","blue","magenta"];return function(r,n,i){return" "===r?r:e[t[n++%t.length]](r)}}},7571:e=>{e.exports=function(e){var t=["underline","inverse","grey","yellow","red","green","blue","white","cyan","magenta","brightYellow","brightRed","brightGreen","brightBlue","brightWhite","brightCyan","brightMagenta"];return function(r,n,i){return" "===r?r:e[t[Math.round(Math.random()*(t.length-2))]](r)}}},9541:e=>{e.exports=function(e){return function(t,r,n){return r%2==0?t:e.inverse(t)}}},9534:e=>{var t={};e.exports=t;var r={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],grey:[90,39],brightRed:[91,39],brightGreen:[92,39],brightYellow:[93,39],brightBlue:[94,39],brightMagenta:[95,39],brightCyan:[96,39],brightWhite:[97,39],bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgGray:[100,49],bgGrey:[100,49],bgBrightRed:[101,49],bgBrightGreen:[102,49],bgBrightYellow:[103,49],bgBrightBlue:[104,49],bgBrightMagenta:[105,49],bgBrightCyan:[106,49],bgBrightWhite:[107,49],blackBG:[40,49],redBG:[41,49],greenBG:[42,49],yellowBG:[43,49],blueBG:[44,49],magentaBG:[45,49],cyanBG:[46,49],whiteBG:[47,49]};Object.keys(r).forEach((function(e){var n=r[e],i=t[e]=[];i.open="["+n[0]+"m",i.close="["+n[1]+"m"}))},8534:e=>{"use strict";e.exports=function(e,t){var r=(t=t||process.argv).indexOf("--"),n=/^-{1,2}/.test(e)?"":"--",i=t.indexOf(n+e);return-1!==i&&(-1===r||i<r)}},6974:(e,t,r)=>{"use strict";var n=r(2037),i=r(8534),s=process.env,o=void 0;function a(e){var t=function(e){if(!1===o)return 0;if(i("color=16m")||i("color=full")||i("color=truecolor"))return 3;if(i("color=256"))return 2;if(e&&!e.isTTY&&!0!==o)return 0;var t=o?1:0;if("win32"===process.platform){var r=n.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(r[0])>=10&&Number(r[2])>=10586?Number(r[2])>=14931?3:2:1}if("CI"in s)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some((function(e){return e in s}))||"codeship"===s.CI_NAME?1:t;if("TEAMCITY_VERSION"in s)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(s.TEAMCITY_VERSION)?1:0;if("TERM_PROGRAM"in s){var a=parseInt((s.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(s.TERM_PROGRAM){case"iTerm.app":return a>=3?3:2;case"Hyper":return 3;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(s.TERM)?2:/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(s.TERM)||"COLORTERM"in s?1:(s.TERM,t)}(e);return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(t)}i("no-color")||i("no-colors")||i("color=false")?o=!1:(i("color")||i("colors")||i("color=true")||i("color=always"))&&(o=!0),"FORCE_COLOR"in s&&(o=0===s.FORCE_COLOR.length||0!==parseInt(s.FORCE_COLOR,10)),e.exports={supportsColor:a,stdout:a(process.stdout),stderr:a(process.stderr)}},1818:(e,t,r)=>{var n=r(3062);e.exports=n},8248:e=>{var t=[],r=[],n=function(){};function i(e){return!~t.indexOf(e)&&(t.push(e),!0)}function s(e){n=e}function o(e){for(var r=[],n=0;n<t.length;n++)if(t[n].async)r.push(t[n]);else if(t[n](e))return!0;return!!r.length&&new Promise((function(t){Promise.all(r.map((function(t){return t(e)}))).then((function(e){t(e.some(Boolean))}))}))}function a(e){return!~r.indexOf(e)&&(r.push(e),!0)}function l(){n.apply(n,arguments)}function u(e){for(var t=0;t<r.length;t++)e=r[t].apply(r[t],arguments);return e}function c(e,t){var r=Object.prototype.hasOwnProperty;for(var n in t)r.call(t,n)&&(e[n]=t[n]);return e}function f(e){return e.enabled=!1,e.modify=a,e.set=s,e.use=i,c((function(){return!1}),e)}function h(e){return e.enabled=!0,e.modify=a,e.set=s,e.use=i,c((function(){var t=Array.prototype.slice.call(arguments,0);return l.call(l,e,u(t,e)),!0}),e)}e.exports=function(e){return e.introduce=c,e.enabled=o,e.process=u,e.modify=a,e.write=l,e.nope=f,e.yep=h,e.set=s,e.use=i,e}},952:(e,t,r)=>{e.exports=r(1691)},1691:(e,t,r)=>{var n=r(8248)((function e(t,r){return(r=r||{}).namespace=t,r.prod=!0,r.dev=!1,r.force||e.force?e.yep(r):e.nope(r)}));e.exports=n},6824:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,s.isAsync)(e)?function(...t){const r=t.pop();return a(e.apply(this,t),r)}:(0,n.default)((function(t,r){var n;try{n=e.apply(this,t)}catch(e){return r(e)}if(n&&"function"==typeof n.then)return a(n,r);r(null,n)}))};var n=o(r(1819)),i=o(r(6077)),s=r(8309);function o(e){return e&&e.__esModule?e:{default:e}}function a(e,t){return e.then((e=>{l(t,null,e)}),(e=>{l(t,e&&e.message?e:new Error(e))}))}function l(e,t,r){try{e(t,r)}catch(e){(0,i.default)((e=>{throw e}),e)}}e.exports=t.default},3676:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=c(r(3100)),i=c(r(2668)),s=c(r(2081)),o=c(r(4706)),a=c(r(8285)),l=c(r(8309)),u=c(r(8958));function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t,r){r=(0,o.default)(r);var n=0,s=0,{length:l}=e,u=!1;function c(e,t){!1===e&&(u=!0),!0!==u&&(e?r(e):++s!==l&&t!==i.default||r(null))}for(0===l&&r(null);n<l;n++)t(e[n],n,(0,a.default)(c))}function h(e,t,r){return(0,s.default)(e,1/0,t,r)}t.default=(0,u.default)((function(e,t,r){return((0,n.default)(e)?f:h)(e,(0,l.default)(t),r)}),3),e.exports=t.default},2081:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(r(7880)),i=o(r(8309)),s=o(r(8958));function o(e){return e&&e.__esModule?e:{default:e}}t.default=(0,s.default)((function(e,t,r,s){return(0,n.default)(t)(e,(0,i.default)(r),s)}),4),e.exports=t.default},327:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=s(r(2081)),i=s(r(8958));function s(e){return e&&e.__esModule?e:{default:e}}t.default=(0,i.default)((function(e,t,r){return(0,n.default)(e,1,t,r)}),3),e.exports=t.default},230:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=a(r(3676)),i=a(r(9905)),s=a(r(8309)),o=a(r(8958));function a(e){return e&&e.__esModule?e:{default:e}}t.default=(0,o.default)((function(e,t,r){return(0,n.default)(e,(0,i.default)((0,s.default)(t)),r)}),3),e.exports=t.default},4242:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,n){let s=!1,o=!1,a=!1,l=0,u=0;function c(){l>=t||a||s||(a=!0,e.next().then((({value:e,done:t})=>{if(!o&&!s){if(a=!1,t)return s=!0,void(l<=0&&n(null));l++,r(e,u,f),u++,c()}})).catch(h))}function f(e,t){if(l-=1,!o)return e?h(e):!1===e?(s=!0,void(o=!0)):t===i.default||s&&l<=0?(s=!0,n(null)):void c()}function h(e){o||(a=!1,s=!0,n(e))}c()};var n,i=(n=r(2668))&&n.__esModule?n:{default:n};e.exports=t.default},8958:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t=e.length){if(!t)throw new Error("arity is undefined");return function(...r){return"function"==typeof r[t-1]?e.apply(this,r):new Promise(((n,i)=>{r[t-1]=(e,...t)=>{if(e)return i(e);n(t.length>1?t:t[0])},e.apply(this,r)}))}},e.exports=t.default},2668:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={},e.exports=t.default},7880:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=u(r(4706)),i=u(r(6289)),s=u(r(8285)),o=r(8309),a=u(r(4242)),l=u(r(2668));function u(e){return e&&e.__esModule?e:{default:e}}t.default=e=>(t,r,u)=>{if(u=(0,n.default)(u),e<=0)throw new RangeError("concurrency limit cannot be less than 1");if(!t)return u(null);if((0,o.isAsyncGenerator)(t))return(0,a.default)(t,e,r,u);if((0,o.isAsyncIterable)(t))return(0,a.default)(t[Symbol.asyncIterator](),e,r,u);var c=(0,i.default)(t),f=!1,h=!1,d=0,p=!1;function g(e,t){if(!h)if(d-=1,e)f=!0,u(e);else if(!1===e)f=!0,h=!0;else{if(t===l.default||f&&d<=0)return f=!0,u(null);p||m()}}function m(){for(p=!0;d<e&&!f;){var t=c();if(null===t)return f=!0,void(d<=0&&u(null));d+=1,r(t.value,t.key,(0,s.default)(g))}p=!1}m()},e.exports=t.default},5182:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e[Symbol.iterator]&&e[Symbol.iterator]()},e.exports=t.default},1819:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(...t){var r=t.pop();return e.call(this,t,r)}},e.exports=t.default},3100:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e&&"number"==typeof e.length&&e.length>=0&&e.length%1==0},e.exports=t.default},6289:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if((0,n.default)(e))return function(e){var t=-1,r=e.length;return function(){return++t<r?{value:e[t],key:t}:null}}(e);var t=(0,i.default)(e);return t?function(e){var t=-1;return function(){var r=e.next();return r.done?null:(t++,{value:r.value,key:t})}}(t):function(e){var t=e?Object.keys(e):[],r=-1,n=t.length;return function i(){var s=t[++r];return"__proto__"===s?i():r<n?{value:e[s],key:s}:null}}(e)};var n=s(r(3100)),i=s(r(5182));function s(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},4706:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(...t){if(null!==e){var r=e;e=null,r.apply(this,t)}}return Object.assign(t,e),t},e.exports=t.default},8285:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(...t){if(null===e)throw new Error("Callback was already called.");var r=e;e=null,r.apply(this,t)}},e.exports=t.default},5127:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(r(3100)),i=o(r(8309)),s=o(r(8958));function o(e){return e&&e.__esModule?e:{default:e}}t.default=(0,s.default)(((e,t,r)=>{var s=(0,n.default)(t)?[]:{};e(t,((e,t,r)=>{(0,i.default)(e)(((e,...n)=>{n.length<2&&([n]=n),s[t]=n,r(e)}))}),(e=>r(e,s)))}),3),e.exports=t.default},6077:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fallback=o,t.wrap=a;var r,n=t.hasQueueMicrotask="function"==typeof queueMicrotask&&queueMicrotask,i=t.hasSetImmediate="function"==typeof setImmediate&&setImmediate,s=t.hasNextTick="object"==typeof process&&"function"==typeof process.nextTick;function o(e){setTimeout(e,0)}function a(e){return(t,...r)=>e((()=>t(...r)))}r=n?queueMicrotask:i?setImmediate:s?process.nextTick:o,t.default=a(r)},9905:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(t,r,n)=>e(t,n)},e.exports=t.default},8309:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isAsyncIterable=t.isAsyncGenerator=t.isAsync=void 0;var n,i=(n=r(6824))&&n.__esModule?n:{default:n};function s(e){return"AsyncFunction"===e[Symbol.toStringTag]}t.default=function(e){if("function"!=typeof e)throw new Error("expected a function");return s(e)?(0,i.default)(e):e},t.isAsync=s,t.isAsyncGenerator=function(e){return"AsyncGenerator"===e[Symbol.toStringTag]},t.isAsyncIterable=function(e){return"function"==typeof e[Symbol.asyncIterator]}},8563:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,n.default)(i.default,e,t)};var n=s(r(5127)),i=s(r(327));function s(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},8851:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>k,assign:()=>c,format:()=>R,parse:()=>T,defaultI18n:()=>p,setGlobalDateI18n:()=>m,setGlobalDateMasks:()=>j});var n=/d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g,i="[1-9]\\d?",s="\\d\\d",o="[^\\s]+",a=/\[([^]*?)\]/gm;function l(e,t){for(var r=[],n=0,i=e.length;n<i;n++)r.push(e[n].substr(0,t));return r}var u=function(e){return function(t,r){var n=r[e].map((function(e){return e.toLowerCase()})),i=n.indexOf(t.toLowerCase());return i>-1?i:null}};function c(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];for(var n=0,i=t;n<i.length;n++){var s=i[n];for(var o in s)e[o]=s[o]}return e}var f=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],h=["January","February","March","April","May","June","July","August","September","October","November","December"],d=l(h,3),p={dayNamesShort:l(f,3),dayNames:f,monthNamesShort:d,monthNames:h,amPm:["am","pm"],DoFn:function(e){return e+["th","st","nd","rd"][e%10>3?0:(e-e%10!=10?1:0)*e%10]}},g=c({},p),m=function(e){return g=c(g,e)},b=function(e){return e.replace(/[|\\{()[^$+*?.-]/g,"\\$&")},y=function(e,t){for(void 0===t&&(t=2),e=String(e);e.length<t;)e="0"+e;return e},v={D:function(e){return String(e.getDate())},DD:function(e){return y(e.getDate())},Do:function(e,t){return t.DoFn(e.getDate())},d:function(e){return String(e.getDay())},dd:function(e){return y(e.getDay())},ddd:function(e,t){return t.dayNamesShort[e.getDay()]},dddd:function(e,t){return t.dayNames[e.getDay()]},M:function(e){return String(e.getMonth()+1)},MM:function(e){return y(e.getMonth()+1)},MMM:function(e,t){return t.monthNamesShort[e.getMonth()]},MMMM:function(e,t){return t.monthNames[e.getMonth()]},YY:function(e){return y(String(e.getFullYear()),4).substr(2)},YYYY:function(e){return y(e.getFullYear(),4)},h:function(e){return String(e.getHours()%12||12)},hh:function(e){return y(e.getHours()%12||12)},H:function(e){return String(e.getHours())},HH:function(e){return y(e.getHours())},m:function(e){return String(e.getMinutes())},mm:function(e){return y(e.getMinutes())},s:function(e){return String(e.getSeconds())},ss:function(e){return y(e.getSeconds())},S:function(e){return String(Math.round(e.getMilliseconds()/100))},SS:function(e){return y(Math.round(e.getMilliseconds()/10),2)},SSS:function(e){return y(e.getMilliseconds(),3)},a:function(e,t){return e.getHours()<12?t.amPm[0]:t.amPm[1]},A:function(e,t){return e.getHours()<12?t.amPm[0].toUpperCase():t.amPm[1].toUpperCase()},ZZ:function(e){var t=e.getTimezoneOffset();return(t>0?"-":"+")+y(100*Math.floor(Math.abs(t)/60)+Math.abs(t)%60,4)},Z:function(e){var t=e.getTimezoneOffset();return(t>0?"-":"+")+y(Math.floor(Math.abs(t)/60),2)+":"+y(Math.abs(t)%60,2)}},w=function(e){return+e-1},_=[null,i],S=[null,o],E=["isPm",o,function(e,t){var r=e.toLowerCase();return r===t.amPm[0]?0:r===t.amPm[1]?1:null}],x=["timezoneOffset","[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z?",function(e){var t=(e+"").match(/([+-]|\d\d)/gi);if(t){var r=60*+t[1]+parseInt(t[2],10);return"+"===t[0]?r:-r}return 0}],M={D:["day",i],DD:["day",s],Do:["day","[1-9]\\d?[^\\s]+",function(e){return parseInt(e,10)}],M:["month",i,w],MM:["month",s,w],YY:["year",s,function(e){var t=+(""+(new Date).getFullYear()).substr(0,2);return+(""+(+e>68?t-1:t)+e)}],h:["hour",i,void 0,"isPm"],hh:["hour",s,void 0,"isPm"],H:["hour",i],HH:["hour",s],m:["minute",i],mm:["minute",s],s:["second",i],ss:["second",s],YYYY:["year","\\d{4}"],S:["millisecond","\\d",function(e){return 100*+e}],SS:["millisecond",s,function(e){return 10*+e}],SSS:["millisecond","\\d{3}"],d:_,dd:_,ddd:S,dddd:S,MMM:["month",o,u("monthNamesShort")],MMMM:["month",o,u("monthNames")],a:E,A:E,ZZ:x,Z:x},O={default:"ddd MMM DD YYYY HH:mm:ss",shortDate:"M/D/YY",mediumDate:"MMM D, YYYY",longDate:"MMMM D, YYYY",fullDate:"dddd, MMMM D, YYYY",isoDate:"YYYY-MM-DD",isoDateTime:"YYYY-MM-DDTHH:mm:ssZ",shortTime:"HH:mm",mediumTime:"HH:mm:ss",longTime:"HH:mm:ss.SSS"},j=function(e){return c(O,e)},R=function(e,t,r){if(void 0===t&&(t=O.default),void 0===r&&(r={}),"number"==typeof e&&(e=new Date(e)),"[object Date]"!==Object.prototype.toString.call(e)||isNaN(e.getTime()))throw new Error("Invalid Date pass to format");var i=[];t=(t=O[t]||t).replace(a,(function(e,t){return i.push(t),"@@@"}));var s=c(c({},g),r);return(t=t.replace(n,(function(t){return v[t](e,s)}))).replace(/@@@/g,(function(){return i.shift()}))};function T(e,t,r){if(void 0===r&&(r={}),"string"!=typeof t)throw new Error("Invalid format in fecha parse");if(t=O[t]||t,e.length>1e3)return null;var i={year:(new Date).getFullYear(),month:0,day:1,hour:0,minute:0,second:0,millisecond:0,isPm:null,timezoneOffset:null},s=[],o=[],l=t.replace(a,(function(e,t){return o.push(b(t)),"@@@"})),u={},f={};l=b(l).replace(n,(function(e){var t=M[e],r=t[0],n=t[1],i=t[3];if(u[r])throw new Error("Invalid format. "+r+" specified twice in format");return u[r]=!0,i&&(f[i]=!0),s.push(t),"("+n+")"})),Object.keys(f).forEach((function(e){if(!u[e])throw new Error("Invalid format. "+e+" is required in specified format")})),l=l.replace(/@@@/g,(function(){return o.shift()}));var h=e.match(new RegExp(l,"i"));if(!h)return null;for(var d=c(c({},g),r),p=1;p<h.length;p++){var m=s[p-1],y=m[0],v=m[2],w=v?v(h[p],d):+h[p];if(null==w)return null;i[y]=w}1===i.isPm&&null!=i.hour&&12!=+i.hour?i.hour=+i.hour+12:0===i.isPm&&12==+i.hour&&(i.hour=0);for(var _=new Date(i.year,i.month,i.day,i.hour,i.minute,i.second,i.millisecond),S=[["month","getMonth"],["day","getDate"],["hour","getHours"],["minute","getMinutes"],["second","getSeconds"]],E=(p=0,S.length);p<E;p++)if(u[S[p][0]]&&i[S[p][0]]!==_[S[p][1]]())return null;return null==i.timezoneOffset?_:new Date(Date.UTC(i.year,i.month,i.day,i.hour,i.minute-i.timezoneOffset,i.second,i.millisecond))}const k={format:R,parse:T,defaultI18n:p,setGlobalDateI18n:m,setGlobalDateMasks:j}},6893:e=>{"use strict";var t=Object.prototype.toString;e.exports=function(e){if("string"==typeof e.displayName&&e.constructor.name)return e.displayName;if("string"==typeof e.name&&e.name)return e.name;if("object"==typeof e&&e.constructor&&"string"==typeof e.constructor.name)return e.constructor.name;var r=e.toString(),n=t.call(e).slice(8,-1);return(r="Function"===n?r.substring(r.indexOf("(")+1,r.indexOf(")")):n)||"anonymous"}},8632:(e,t,r)=>{try{var n=r(3837);if("function"!=typeof n.inherits)throw"";e.exports=n.inherits}catch(t){e.exports=r(7924)}},7924:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},4321:(e,t,r)=>{"use strict";const n=r(3633);e.exports=n((e=>(e.message=`\t${e.message}`,e)))},3153:(e,t,r)=>{"use strict";const{Colorizer:n}=r(9758),{Padder:i}=r(1435),{configs:s,MESSAGE:o}=r(8834);class a{constructor(e={}){e.levels||(e.levels=s.cli.levels),this.colorizer=new n(e),this.padder=new i(e),this.options=e}transform(e,t){return this.colorizer.transform(this.padder.transform(e,t),t),e[o]=`${e.level}:${e.message}`,e}}e.exports=e=>new a(e),e.exports.Format=a},9758:(e,t,r)=>{"use strict";const n=r(1818),{LEVEL:i,MESSAGE:s}=r(8834);n.enabled=!0;const o=/\s+/;class a{constructor(e={}){e.colors&&this.addColors(e.colors),this.options=e}static addColors(e){const t=Object.keys(e).reduce(((t,r)=>(t[r]=o.test(e[r])?e[r].split(o):e[r],t)),{});return a.allColors=Object.assign({},a.allColors||{},t),a.allColors}addColors(e){return a.addColors(e)}colorize(e,t,r){if(void 0===r&&(r=t),!Array.isArray(a.allColors[e]))return n[a.allColors[e]](r);for(let t=0,i=a.allColors[e].length;t<i;t++)r=n[a.allColors[e][t]](r);return r}transform(e,t){return t.all&&"string"==typeof e[s]&&(e[s]=this.colorize(e[i],e.level,e[s])),(t.level||t.all||!t.message)&&(e.level=this.colorize(e[i],e.level)),(t.all||t.message)&&(e.message=this.colorize(e[i],e.level,e.message)),e}}e.exports=e=>new a(e),e.exports.Colorizer=e.exports.Format=a},892:(e,t,r)=>{"use strict";const n=r(3633);function i(e){if(e.every(s))return t=>{let r=t;for(let t=0;t<e.length;t++)if(r=e[t].transform(r,e[t].options),!r)return!1;return r}}function s(e){if("function"!=typeof e.transform)throw new Error(["No transform function found on format. Did you create a format instance?","const myFormat = format(formatFn);","const instance = myFormat();"].join("\n"));return!0}e.exports=(...e)=>{const t=n(i(e)),r=t();return r.Format=t.Format,r},e.exports.cascade=i},6755:(e,t,r)=>{"use strict";const n=r(3633),{LEVEL:i,MESSAGE:s}=r(8834);e.exports=n(((e,{stack:t})=>{if(e instanceof Error){const r=Object.assign({},e,{level:e.level,[i]:e[i]||e.level,message:e.message,[s]:e[s]||e.message});return t&&(r.stack=e.stack),r}if(!(e.message instanceof Error))return e;const r=e.message;return Object.assign(e,r),e.message=r.message,e[s]=r.message,t&&(e.stack=r.stack),e}))},3633:e=>{"use strict";class t extends Error{constructor(e){super(`Format functions must be synchronous taking a two arguments: (info, opts)\nFound: ${e.toString().split("\n")[0]}\n`),Error.captureStackTrace(this,t)}}e.exports=e=>{if(e.length>2)throw new t(e);function r(e={}){this.options=e}function n(e){return new r(e)}return r.prototype.transform=e,n.Format=r,n}},8586:(e,t,r)=>{"use strict";const n=t.format=r(3633);function i(e,t){Object.defineProperty(n,e,{get:()=>t(),configurable:!0})}t.levels=r(7600),i("align",(function(){return r(4321)})),i("errors",(function(){return r(6755)})),i("cli",(function(){return r(3153)})),i("combine",(function(){return r(892)})),i("colorize",(function(){return r(9758)})),i("json",(function(){return r(4342)})),i("label",(function(){return r(5335)})),i("logstash",(function(){return r(5889)})),i("metadata",(function(){return r(2744)})),i("ms",(function(){return r(9920)})),i("padLevels",(function(){return r(1435)})),i("prettyPrint",(function(){return r(7828)})),i("printf",(function(){return r(5877)})),i("simple",(function(){return r(5209)})),i("splat",(function(){return r(5068)})),i("timestamp",(function(){return r(5165)})),i("uncolorize",(function(){return r(6178)}))},4342:(e,t,r)=>{"use strict";const n=r(3633),{MESSAGE:i}=r(8834),s=r(7954);function o(e,t){return"bigint"==typeof t?t.toString():t}e.exports=n(((e,t)=>{const r=s.configure(t);return e[i]=r(e,t.replacer||o,t.space),e}))},5335:(e,t,r)=>{"use strict";const n=r(3633);e.exports=n(((e,t)=>t.message?(e.message=`[${t.label}] ${e.message}`,e):(e.label=t.label,e)))},7600:(e,t,r)=>{"use strict";const{Colorizer:n}=r(9758);e.exports=e=>(n.addColors(e.colors||e),e)},5889:(e,t,r)=>{"use strict";const n=r(3633),{MESSAGE:i}=r(8834),s=r(7954);e.exports=n((e=>{const t={};return e.message&&(t["@message"]=e.message,delete e.message),e.timestamp&&(t["@timestamp"]=e.timestamp,delete e.timestamp),t["@fields"]=e,e[i]=s(t),e}))},2744:(e,t,r)=>{"use strict";const n=r(3633);e.exports=n(((e,t={})=>{let r="metadata";t.key&&(r=t.key);let n=[];return t.fillExcept||t.fillWith||(n.push("level"),n.push("message")),t.fillExcept&&(n=t.fillExcept),n.length>0?function(e,t,r){const n=t.reduce(((t,r)=>(t[r]=e[r],delete e[r],t)),{}),i=Object.keys(e).reduce(((t,r)=>(t[r]=e[r],delete e[r],t)),{});return Object.assign(e,n,{[r]:i}),e}(e,n,r):t.fillWith?function(e,t,r){return e[r]=t.reduce(((t,r)=>(t[r]=e[r],delete e[r],t)),{}),e}(e,t.fillWith,r):e}))},9920:function(e,t,r){"use strict";const n=r(3633),i=r(6045);e.exports=n((e=>{const t=+new Date;return this.diff=t-(this.prevTime||t),this.prevTime=t,e.ms=`+${i(this.diff)}`,e}))},1435:(e,t,r)=>{"use strict";const{configs:n,LEVEL:i,MESSAGE:s}=r(8834);class o{constructor(e={levels:n.npm.levels}){this.paddings=o.paddingForLevels(e.levels,e.filler),this.options=e}static getLongestLevel(e){const t=Object.keys(e).map((e=>e.length));return Math.max(...t)}static paddingForLevel(e,t,r){const n=r+1-e.length,i=Math.floor(n/t.length);return`${t}${t.repeat(i)}`.slice(0,n)}static paddingForLevels(e,t=" "){const r=o.getLongestLevel(e);return Object.keys(e).reduce(((e,n)=>(e[n]=o.paddingForLevel(n,t,r),e)),{})}transform(e,t){return e.message=`${this.paddings[e[i]]}${e.message}`,e[s]&&(e[s]=`${this.paddings[e[i]]}${e[s]}`),e}}e.exports=e=>new o(e),e.exports.Padder=e.exports.Format=o},7828:(e,t,r)=>{"use strict";const n=r(3837).inspect,i=r(3633),{LEVEL:s,MESSAGE:o,SPLAT:a}=r(8834);e.exports=i(((e,t={})=>{const r=Object.assign({},e);return delete r[s],delete r[o],delete r[a],e[o]=n(r,!1,t.depth||null,t.colorize),e}))},5877:(e,t,r)=>{"use strict";const{MESSAGE:n}=r(8834);class i{constructor(e){this.template=e}transform(e){return e[n]=this.template(e),e}}e.exports=e=>new i(e),e.exports.Printf=e.exports.Format=i},5209:(e,t,r)=>{"use strict";const n=r(3633),{MESSAGE:i}=r(8834),s=r(7954);e.exports=n((e=>{const t=s(Object.assign({},e,{level:void 0,message:void 0,splat:void 0})),r=e.padding&&e.padding[e.level]||"";return e[i]="{}"!==t?`${e.level}:${r} ${e.message} ${t}`:`${e.level}:${r} ${e.message}`,e}))},5068:(e,t,r)=>{"use strict";const n=r(3837),{SPLAT:i}=r(8834),s=/%[scdjifoO%]/g,o=/%%/g;class a{constructor(e){this.options=e}_splat(e,t){const r=e.message,s=e[i]||e.splat||[],a=r.match(o),l=a&&a.length||0,u=t.length-l-s.length,c=u<0?s.splice(u,-1*u):[],f=c.length;if(f)for(let t=0;t<f;t++)Object.assign(e,c[t]);return e.message=n.format(r,...s),e}transform(e){const t=e.message,r=e[i]||e.splat;if(!r||!r.length)return e;const n=t&&t.match&&t.match(s);if(!n&&(r||r.length)){const t=r.length>1?r.splice(0):r,n=t.length;if(n)for(let r=0;r<n;r++)Object.assign(e,t[r]);return e}return n?this._splat(e,n):e}}e.exports=e=>new a(e)},5165:(e,t,r)=>{"use strict";const n=r(8851),i=r(3633);e.exports=i(((e,t={})=>(t.format&&(e.timestamp="function"==typeof t.format?t.format():n.format(new Date,t.format)),e.timestamp||(e.timestamp=(new Date).toISOString()),t.alias&&(e[t.alias]=e.timestamp),e)))},6178:(e,t,r)=>{"use strict";const n=r(1818),i=r(3633),{MESSAGE:s}=r(8834);e.exports=i(((e,t)=>(!1!==t.level&&(e.level=n.strip(e.level)),!1!==t.message&&(e.message=n.strip(e.message)),!1!==t.raw&&e[s]&&(e[s]=n.strip(e[s])),e)))},6045:e=>{var t=1e3,r=60*t,n=60*r,i=24*n;function s(e,t,r,n){var i=t>=1.5*r;return Math.round(e/r)+" "+n+(i?"s":"")}e.exports=function(e,o){o=o||{};var a,l,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var s=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(s){var o=parseFloat(s[1]);switch((s[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*o;case"weeks":case"week":case"w":return 6048e5*o;case"days":case"day":case"d":return o*i;case"hours":case"hour":case"hrs":case"hr":case"h":return o*n;case"minutes":case"minute":case"mins":case"min":case"m":return o*r;case"seconds":case"second":case"secs":case"sec":case"s":return o*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return o;default:return}}}}(e);if("number"===u&&isFinite(e))return o.long?(a=e,(l=Math.abs(a))>=i?s(a,l,i,"day"):l>=n?s(a,l,n,"hour"):l>=r?s(a,l,r,"minute"):l>=t?s(a,l,t,"second"):a+" ms"):function(e){var s=Math.abs(e);return s>=i?Math.round(e/i)+"d":s>=n?Math.round(e/n)+"h":s>=r?Math.round(e/r)+"m":s>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},6586:(e,t,r)=>{"use strict";var n=r(6893);e.exports=function(e){var t,r=0;function i(){return r||(r=1,t=e.apply(this,arguments),e=null),t}return i.displayName=n(e),i}},3637:e=>{"use strict";const t={};function r(e,r,n){n||(n=Error);class i extends n{constructor(e,t,n){super(function(e,t,n){return"string"==typeof r?r:r(e,t,n)}(e,t,n))}}i.prototype.name=n.name,i.prototype.code=e,t[e]=i}function n(e,t){if(Array.isArray(e)){const r=e.length;return e=e.map((e=>String(e))),r>2?`one of ${t} ${e.slice(0,r-1).join(", ")}, or `+e[r-1]:2===r?`one of ${t} ${e[0]} or ${e[1]}`:`of ${t} ${e[0]}`}return`of ${t} ${String(e)}`}r("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(e,t,r){let i;var s;let o;if("string"==typeof t&&(s="not ",t.substr(0,s.length)===s)?(i="must not be",t=t.replace(/^not /,"")):i="must be",function(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}(e," argument"))o=`The ${e} ${i} ${n(t,"type")}`;else{o=`The "${e}" ${"number"!=typeof l&&(l=0),l+".".length>(a=e).length||-1===a.indexOf(".",l)?"argument":"property"} ${i} ${n(t,"type")}`}var a,l;return o+=". Received type "+typeof r,o}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.q=t},4231:(e,t,r)=>{"use strict";var n=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=u;var i=r(1235),s=r(9123);r(8632)(u,i);for(var o=n(s.prototype),a=0;a<o.length;a++){var l=o[a];u.prototype[l]||(u.prototype[l]=s.prototype[l])}function u(e){if(!(this instanceof u))return new u(e);i.call(this,e),s.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",c)))}function c(){this._writableState.ended||process.nextTick(f,this)}function f(e){e.end()}Object.defineProperty(u.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(u.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(u.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(u.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}})},4769:(e,t,r)=>{"use strict";e.exports=i;var n=r(586);function i(e){if(!(this instanceof i))return new i(e);n.call(this,e)}r(8632)(i,n),i.prototype._transform=function(e,t,r){r(null,e)}},1235:(e,t,r)=>{"use strict";var n;e.exports=x,x.ReadableState=E,r(2361).EventEmitter;var i,s=function(e,t){return e.listeners(t).length},o=r(5855),a=r(4300).Buffer,l=global.Uint8Array||function(){},u=r(3837);i=u&&u.debuglog?u.debuglog("stream"):function(){};var c,f,h,d=r(5097),p=r(3379),g=r(7643).getHighWaterMark,m=r(3637).q,b=m.ERR_INVALID_ARG_TYPE,y=m.ERR_STREAM_PUSH_AFTER_EOF,v=m.ERR_METHOD_NOT_IMPLEMENTED,w=m.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r(8632)(x,o);var _=p.errorOrDestroy,S=["error","close","destroy","pause","resume"];function E(e,t,i){n=n||r(4231),e=e||{},"boolean"!=typeof i&&(i=t instanceof n),this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=g(this,e,"readableHighWaterMark",i),this.buffer=new d,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(c||(c=r(8570).s),this.decoder=new c(e.encoding),this.encoding=e.encoding)}function x(e){if(n=n||r(4231),!(this instanceof x))return new x(e);var t=this instanceof n;this._readableState=new E(e,this,t),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),o.call(this)}function M(e,t,r,n,s){i("readableAddChunk",t);var o,u=e._readableState;if(null===t)u.reading=!1,function(e,t){if(i("onEofChunk"),!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,t.sync?T(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,k(e)))}}(e,u);else if(s||(o=function(e,t){var r,n;return n=t,a.isBuffer(n)||n instanceof l||"string"==typeof t||void 0===t||e.objectMode||(r=new b("chunk",["string","Buffer","Uint8Array"],t)),r}(u,t)),o)_(e,o);else if(u.objectMode||t&&t.length>0)if("string"==typeof t||u.objectMode||Object.getPrototypeOf(t)===a.prototype||(t=function(e){return a.from(e)}(t)),n)u.endEmitted?_(e,new w):O(e,u,t,!0);else if(u.ended)_(e,new y);else{if(u.destroyed)return!1;u.reading=!1,u.decoder&&!r?(t=u.decoder.write(t),u.objectMode||0!==t.length?O(e,u,t,!1):P(e,u)):O(e,u,t,!1)}else n||(u.reading=!1,P(e,u));return!u.ended&&(u.length<u.highWaterMark||0===u.length)}function O(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&T(e)),P(e,t)}Object.defineProperty(x.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),x.prototype.destroy=p.destroy,x.prototype._undestroy=p.undestroy,x.prototype._destroy=function(e,t){t(e)},x.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=a.from(e,t),t=""),r=!0),M(this,e,t,!1,r)},x.prototype.unshift=function(e){return M(this,e,null,!0,!1)},x.prototype.isPaused=function(){return!1===this._readableState.flowing},x.prototype.setEncoding=function(e){c||(c=r(8570).s);var t=new c(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=t.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var j=1073741824;function R(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=j?e=j:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function T(e){var t=e._readableState;i("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(i("emitReadable",t.flowing),t.emittedReadable=!0,process.nextTick(k,e))}function k(e){var t=e._readableState;i("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,N(e)}function P(e,t){t.readingMore||(t.readingMore=!0,process.nextTick(L,e,t))}function L(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var r=t.length;if(i("maybeReadMore read 0"),e.read(0),r===t.length)break}t.readingMore=!1}function A(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function $(e){i("readable nexttick read 0"),e.read(0)}function C(e,t){i("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),N(e),t.flowing&&!t.reading&&e.read(0)}function N(e){var t=e._readableState;for(i("flow",t.flowing);t.flowing&&null!==e.read(););}function D(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r);var r}function I(e){var t=e._readableState;i("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,process.nextTick(F,t,e))}function F(e,t){if(i("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit("end"),e.autoDestroy)){var r=t._writableState;(!r||r.autoDestroy&&r.finished)&&t.destroy()}}function q(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}x.prototype.read=function(e){i("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return i("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?I(this):T(this),null;if(0===(e=R(e,t))&&t.ended)return 0===t.length&&I(this),null;var n,s=t.needReadable;return i("need readable",s),(0===t.length||t.length-e<t.highWaterMark)&&i("length less than watermark",s=!0),t.ended||t.reading?i("reading or ended",s=!1):s&&(i("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=R(r,t))),null===(n=e>0?D(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&I(this)),null!==n&&this.emit("data",n),n},x.prototype._read=function(e){_(this,new v("_read()"))},x.prototype.pipe=function(e,t){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e)}n.pipesCount+=1,i("pipe count=%d opts=%j",n.pipesCount,t);var o=t&&!1===t.end||e===process.stdout||e===process.stderr?p:a;function a(){i("onend"),e.end()}n.endEmitted?process.nextTick(o):r.once("end",o),e.on("unpipe",(function t(s,o){i("onunpipe"),s===r&&o&&!1===o.hasUnpiped&&(o.hasUnpiped=!0,i("cleanup"),e.removeListener("close",h),e.removeListener("finish",d),e.removeListener("drain",l),e.removeListener("error",f),e.removeListener("unpipe",t),r.removeListener("end",a),r.removeListener("end",p),r.removeListener("data",c),u=!0,!n.awaitDrain||e._writableState&&!e._writableState.needDrain||l())}));var l=function(e){return function(){var t=e._readableState;i("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,N(e))}}(r);e.on("drain",l);var u=!1;function c(t){i("ondata");var s=e.write(t);i("dest.write",s),!1===s&&((1===n.pipesCount&&n.pipes===e||n.pipesCount>1&&-1!==q(n.pipes,e))&&!u&&(i("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause())}function f(t){i("onerror",t),p(),e.removeListener("error",f),0===s(e,"error")&&_(e,t)}function h(){e.removeListener("finish",d),p()}function d(){i("onfinish"),e.removeListener("close",h),p()}function p(){i("unpipe"),r.unpipe(e)}return r.on("data",c),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events.error?Array.isArray(e._events.error)?e._events.error.unshift(r):e._events.error=[r,e._events.error]:e.on(t,r)}(e,"error",f),e.once("close",h),e.once("finish",d),e.emit("pipe",r),n.flowing||(i("pipe resume"),r.resume()),e},x.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var s=0;s<i;s++)n[s].emit("unpipe",this,{hasUnpiped:!1});return this}var o=q(t.pipes,e);return-1===o||(t.pipes.splice(o,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},x.prototype.on=function(e,t){var r=o.prototype.on.call(this,e,t),n=this._readableState;return"data"===e?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===e&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,i("on readable",n.length,n.reading),n.length?T(this):n.reading||process.nextTick($,this))),r},x.prototype.addListener=x.prototype.on,x.prototype.removeListener=function(e,t){var r=o.prototype.removeListener.call(this,e,t);return"readable"===e&&process.nextTick(A,this),r},x.prototype.removeAllListeners=function(e){var t=o.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||process.nextTick(A,this),t},x.prototype.resume=function(){var e=this._readableState;return e.flowing||(i("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,process.nextTick(C,e,t))}(this,e)),e.paused=!1,this},x.prototype.pause=function(){return i("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(i("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},x.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var s in e.on("end",(function(){if(i("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(s){i("wrapped data"),r.decoder&&(s=r.decoder.write(s)),r.objectMode&&null==s||(r.objectMode||s&&s.length)&&(t.push(s)||(n=!0,e.pause()))})),e)void 0===this[s]&&"function"==typeof e[s]&&(this[s]=function(t){return function(){return e[t].apply(e,arguments)}}(s));for(var o=0;o<S.length;o++)e.on(S[o],this.emit.bind(this,S[o]));return this._read=function(t){i("wrapped _read",t),n&&(n=!1,e.resume())},this},"function"==typeof Symbol&&(x.prototype[Symbol.asyncIterator]=function(){return void 0===f&&(f=r(3820)),f(this)}),Object.defineProperty(x.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(x.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(x.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),x._fromList=D,Object.defineProperty(x.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(x.from=function(e,t){return void 0===h&&(h=r(7596)),h(x,e,t)})},586:(e,t,r)=>{"use strict";e.exports=c;var n=r(3637).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,s=n.ERR_MULTIPLE_CALLBACK,o=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,a=n.ERR_TRANSFORM_WITH_LENGTH_0,l=r(4231);function u(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new s);r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function c(e){if(!(this instanceof c))return new c(e);l.call(this,e),this._transformState={afterTransform:u.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",f)}function f(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?h(this,null,null):this._flush((function(t,r){h(e,t,r)}))}function h(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new a;if(e._transformState.transforming)throw new o;return e.push(null)}r(8632)(c,l),c.prototype.push=function(e,t){return this._transformState.needTransform=!1,l.prototype.push.call(this,e,t)},c.prototype._transform=function(e,t,r){r(new i("_transform()"))},c.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},c.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},c.prototype._destroy=function(e,t){l.prototype._destroy.call(this,e,(function(e){t(e)}))}},9123:(e,t,r)=>{"use strict";function n(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;for(e.entry=null;n;){var i=n.callback;t.pendingcb--,i(undefined),n=n.next}t.corkedRequestsFree.next=e}(t,e)}}var i;e.exports=x,x.WritableState=E;var s,o={deprecate:r(1118)},a=r(5855),l=r(4300).Buffer,u=global.Uint8Array||function(){},c=r(3379),f=r(7643).getHighWaterMark,h=r(3637).q,d=h.ERR_INVALID_ARG_TYPE,p=h.ERR_METHOD_NOT_IMPLEMENTED,g=h.ERR_MULTIPLE_CALLBACK,m=h.ERR_STREAM_CANNOT_PIPE,b=h.ERR_STREAM_DESTROYED,y=h.ERR_STREAM_NULL_VALUES,v=h.ERR_STREAM_WRITE_AFTER_END,w=h.ERR_UNKNOWN_ENCODING,_=c.errorOrDestroy;function S(){}function E(e,t,s){i=i||r(4231),e=e||{},"boolean"!=typeof s&&(s=t instanceof i),this.objectMode=!!e.objectMode,s&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=f(this,e,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var o=!1===e.decodeStrings;this.decodeStrings=!o,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if("function"!=typeof i)throw new g;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?(process.nextTick(i,n),process.nextTick(k,e,t),e._writableState.errorEmitted=!0,_(e,n)):(i(n),e._writableState.errorEmitted=!0,_(e,n),k(e,t))}(e,r,n,t,i);else{var s=R(r)||e.destroyed;s||r.corked||r.bufferProcessing||!r.bufferedRequest||j(e,r),n?process.nextTick(O,e,r,s,i):O(e,r,s,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new n(this)}function x(e){var t=this instanceof(i=i||r(4231));if(!t&&!s.call(x,this))return new x(e);this._writableState=new E(e,this,t),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),a.call(this)}function M(e,t,r,n,i,s,o){t.writelen=n,t.writecb=o,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new b("write")):r?e._writev(i,t.onwrite):e._write(i,s,t.onwrite),t.sync=!1}function O(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),k(e,t)}function j(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var i=t.bufferedRequestCount,s=new Array(i),o=t.corkedRequestsFree;o.entry=r;for(var a=0,l=!0;r;)s[a]=r,r.isBuf||(l=!1),r=r.next,a+=1;s.allBuffers=l,M(e,t,!0,t.length,s,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new n(t),t.bufferedRequestCount=0}else{for(;r;){var u=r.chunk,c=r.encoding,f=r.callback;if(M(e,t,!1,t.objectMode?1:u.length,u,c,f),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function R(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function T(e,t){e._final((function(r){t.pendingcb--,r&&_(e,r),t.prefinished=!0,e.emit("prefinish"),k(e,t)}))}function k(e,t){var r=R(t);if(r&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,process.nextTick(T,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var n=e._readableState;(!n||n.autoDestroy&&n.endEmitted)&&e.destroy()}return r}r(8632)(x,a),E.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(E.prototype,"buffer",{get:o.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(s=Function.prototype[Symbol.hasInstance],Object.defineProperty(x,Symbol.hasInstance,{value:function(e){return!!s.call(this,e)||this===x&&e&&e._writableState instanceof E}})):s=function(e){return e instanceof this},x.prototype.pipe=function(){_(this,new m)},x.prototype.write=function(e,t,r){var n,i=this._writableState,s=!1,o=!i.objectMode&&(n=e,l.isBuffer(n)||n instanceof u);return o&&!l.isBuffer(e)&&(e=function(e){return l.from(e)}(e)),"function"==typeof t&&(r=t,t=null),o?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=S),i.ending?function(e,t){var r=new v;_(e,r),process.nextTick(t,r)}(this,r):(o||function(e,t,r,n){var i;return null===r?i=new y:"string"==typeof r||t.objectMode||(i=new d("chunk",["string","Buffer"],r)),!i||(_(e,i),process.nextTick(n,i),!1)}(this,i,e,r))&&(i.pendingcb++,s=function(e,t,r,n,i,s){if(!r){var o=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=l.from(t,r)),t}(t,n,i);n!==o&&(r=!0,i="buffer",n=o)}var a=t.objectMode?1:n.length;t.length+=a;var u=t.length<t.highWaterMark;if(u||(t.needDrain=!0),t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:s,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else M(e,t,!1,a,n,i,s);return u}(this,i,o,e,t,r)),s},x.prototype.cork=function(){this._writableState.corked++},x.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||j(this,e))},x.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new w(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(x.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(x.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),x.prototype._write=function(e,t,r){r(new p("_write()"))},x.prototype._writev=null,x.prototype.end=function(e,t,r){var n=this._writableState;return"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||function(e,t,r){t.ending=!0,k(e,t),r&&(t.finished?process.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r),this},Object.defineProperty(x.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(x.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),x.prototype.destroy=c.destroy,x.prototype._undestroy=c.undestroy,x.prototype._destroy=function(e,t){t(e)}},3820:(e,t,r)=>{"use strict";var n;function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var s=r(7529),o=Symbol("lastResolve"),a=Symbol("lastReject"),l=Symbol("error"),u=Symbol("ended"),c=Symbol("lastPromise"),f=Symbol("handlePromise"),h=Symbol("stream");function d(e,t){return{value:e,done:t}}function p(e){var t=e[o];if(null!==t){var r=e[h].read();null!==r&&(e[c]=null,e[o]=null,e[a]=null,t(d(r,!1)))}}function g(e){process.nextTick(p,e)}var m=Object.getPrototypeOf((function(){})),b=Object.setPrototypeOf((i(n={get stream(){return this[h]},next:function(){var e=this,t=this[l];if(null!==t)return Promise.reject(t);if(this[u])return Promise.resolve(d(void 0,!0));if(this[h].destroyed)return new Promise((function(t,r){process.nextTick((function(){e[l]?r(e[l]):t(d(void 0,!0))}))}));var r,n=this[c];if(n)r=new Promise(function(e,t){return function(r,n){e.then((function(){t[u]?r(d(void 0,!0)):t[f](r,n)}),n)}}(n,this));else{var i=this[h].read();if(null!==i)return Promise.resolve(d(i,!1));r=new Promise(this[f])}return this[c]=r,r}},Symbol.asyncIterator,(function(){return this})),i(n,"return",(function(){var e=this;return new Promise((function(t,r){e[h].destroy(null,(function(e){e?r(e):t(d(void 0,!0))}))}))})),n),m);e.exports=function(e){var t,r=Object.create(b,(i(t={},h,{value:e,writable:!0}),i(t,o,{value:null,writable:!0}),i(t,a,{value:null,writable:!0}),i(t,l,{value:null,writable:!0}),i(t,u,{value:e._readableState.endEmitted,writable:!0}),i(t,f,{value:function(e,t){var n=r[h].read();n?(r[c]=null,r[o]=null,r[a]=null,e(d(n,!1))):(r[o]=e,r[a]=t)},writable:!0}),t));return r[c]=null,s(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=r[a];return null!==t&&(r[c]=null,r[o]=null,r[a]=null,t(e)),void(r[l]=e)}var n=r[o];null!==n&&(r[c]=null,r[o]=null,r[a]=null,n(d(void 0,!0))),r[u]=!0})),e.on("readable",g.bind(null,r)),r}},5097:(e,t,r)=>{"use strict";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=r(4300).Buffer,a=r(3837).inspect,l=a&&a.custom||"inspect";e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}var t,r;return t=e,r=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r}},{key:"concat",value:function(e){if(0===this.length)return o.alloc(0);for(var t,r,n,i=o.allocUnsafe(e>>>0),s=this.head,a=0;s;)t=s.data,r=i,n=a,o.prototype.copy.call(t,r,n),a+=s.data.length,s=s.next;return i}},{key:"consume",value:function(e,t){var r;return e<this.head.data.length?(r=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):r=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,r=1,n=t.data;for(e-=n.length;t=t.next;){var i=t.data,s=e>i.length?i.length:e;if(s===i.length?n+=i:n+=i.slice(0,e),0==(e-=s)){s===i.length?(++r,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=i.slice(s));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(e){var t=o.allocUnsafe(e),r=this.head,n=1;for(r.data.copy(t),e-=r.data.length;r=r.next;){var i=r.data,s=e>i.length?i.length:e;if(i.copy(t,t.length-e,0,s),0==(e-=s)){s===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(s));break}++n}return this.length-=n,t}},{key:l,value:function(e,t){return a(this,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},t,{depth:0,customInspect:!1}))}}],r&&s(t.prototype,r),e}()},3379:e=>{"use strict";function t(e,t){n(e,t),r(e)}function r(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function n(e,t){e.emit("error",t)}e.exports={destroy:function(e,i){var s=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(i?i(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process.nextTick(n,this,e)):process.nextTick(n,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!i&&e?s._writableState?s._writableState.errorEmitted?process.nextTick(r,s):(s._writableState.errorEmitted=!0,process.nextTick(t,s,e)):process.nextTick(t,s,e):i?(process.nextTick(r,s),i(e)):process.nextTick(r,s)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var r=e._readableState,n=e._writableState;r&&r.autoDestroy||n&&n.autoDestroy?e.destroy(t):e.emit("error",t)}}},7529:(e,t,r)=>{"use strict";var n=r(3637).q.ERR_STREAM_PREMATURE_CLOSE;function i(){}e.exports=function e(t,r,s){if("function"==typeof r)return e(t,null,r);r||(r={}),s=function(e){var t=!1;return function(){if(!t){t=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];e.apply(this,n)}}}(s||i);var o=r.readable||!1!==r.readable&&t.readable,a=r.writable||!1!==r.writable&&t.writable,l=function(){t.writable||c()},u=t._writableState&&t._writableState.finished,c=function(){a=!1,u=!0,o||s.call(t)},f=t._readableState&&t._readableState.endEmitted,h=function(){o=!1,f=!0,a||s.call(t)},d=function(e){s.call(t,e)},p=function(){var e;return o&&!f?(t._readableState&&t._readableState.ended||(e=new n),s.call(t,e)):a&&!u?(t._writableState&&t._writableState.ended||(e=new n),s.call(t,e)):void 0},g=function(){t.req.on("finish",c)};return function(e){return e.setHeader&&"function"==typeof e.abort}(t)?(t.on("complete",c),t.on("abort",p),t.req?g():t.on("request",g)):a&&!t._writableState&&(t.on("end",l),t.on("close",l)),t.on("end",h),t.on("finish",c),!1!==r.error&&t.on("error",d),t.on("close",p),function(){t.removeListener("complete",c),t.removeListener("abort",p),t.removeListener("request",g),t.req&&t.req.removeListener("finish",c),t.removeListener("end",l),t.removeListener("close",l),t.removeListener("finish",c),t.removeListener("end",h),t.removeListener("error",d),t.removeListener("close",p)}}},7596:(e,t,r)=>{"use strict";function n(e,t,r,n,i,s,o){try{var a=e[s](o),l=a.value}catch(e){return void r(e)}a.done?t(l):Promise.resolve(l).then(n,i)}function i(e){return function(){var t=this,r=arguments;return new Promise((function(i,s){var o=e.apply(t,r);function a(e){n(o,i,s,a,l,"next",e)}function l(e){n(o,i,s,a,l,"throw",e)}a(void 0)}))}}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var a=r(3637).q.ERR_INVALID_ARG_TYPE;e.exports=function(e,t,r){var n;if(t&&"function"==typeof t.next)n=t;else if(t&&t[Symbol.asyncIterator])n=t[Symbol.asyncIterator]();else{if(!t||!t[Symbol.iterator])throw new a("iterable",["Iterable"],t);n=t[Symbol.iterator]()}var l=new e(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({objectMode:!0},r)),u=!1;function c(){return f.apply(this,arguments)}function f(){return(f=i((function*(){try{var e=yield n.next(),t=e.value;e.done?l.push(null):l.push(yield t)?c():u=!1}catch(e){l.destroy(e)}}))).apply(this,arguments)}return l._read=function(){u||(u=!0,c())},l}},7359:(e,t,r)=>{"use strict";var n,i=r(3637).q,s=i.ERR_MISSING_ARGS,o=i.ERR_STREAM_DESTROYED;function a(e){if(e)throw e}function l(e,t,i,s){s=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(s);var a=!1;e.on("close",(function(){a=!0})),void 0===n&&(n=r(7529)),n(e,{readable:t,writable:i},(function(e){if(e)return s(e);a=!0,s()}));var l=!1;return function(t){if(!a&&!l)return l=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void s(t||new o("pipe"))}}function u(e){e()}function c(e,t){return e.pipe(t)}function f(e){return e.length?"function"!=typeof e[e.length-1]?a:e.pop():a}e.exports=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n,i=f(t);if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new s("streams");var o=t.map((function(e,r){var s=r<t.length-1;return l(e,s,r>0,(function(e){n||(n=e),e&&o.forEach(u),s||(o.forEach(u),i(n))}))}));return t.reduce(c)}},7643:(e,t,r)=>{"use strict";var n=r(3637).q.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(e,t,r,i){var s=function(e,t,r){return null!=e.highWaterMark?e.highWaterMark:t?e[r]:null}(t,i,r);if(null!=s){if(!isFinite(s)||Math.floor(s)!==s||s<0)throw new n(i?r:"highWaterMark",s);return Math.floor(s)}return e.objectMode?16:16384}}},5855:(e,t,r)=>{e.exports=r(2781)},1449:(e,t,r)=>{var n=r(2781);"disable"===process.env.READABLE_STREAM&&n?(e.exports=n.Readable,Object.assign(e.exports,n),e.exports.Stream=n):((t=e.exports=r(1235)).Stream=n||t,t.Readable=t,t.Writable=r(9123),t.Duplex=r(4231),t.Transform=r(586),t.PassThrough=r(4769),t.finished=r(7529),t.pipeline=r(7359))},2673:(e,t,r)=>{var n=r(4300),i=n.Buffer;function s(e,t){for(var r in e)t[r]=e[r]}function o(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(s(n,t),t.Buffer=o),o.prototype=Object.create(i.prototype),s(i,o),o.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},o.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},7954:(e,t)=>{"use strict";const r=m();r.configure=m,r.stringify=r,r.default=r,t.stringify=r,t.configure=m,e.exports=r;const n=/[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/,i=/[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/g,s=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000b","\\f","\\r","\\u000e","\\u000f","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001a","\\u001b","\\u001c","\\u001d","\\u001e","\\u001f","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\"];function o(e){if(2===e.length){const t=e.charCodeAt(1);return`${e[0]}\\u${t.toString(16)}`}const t=e.charCodeAt(0);return s.length>t?s[t]:`\\u${t.toString(16)}`}function a(e){if(e.length<5e3&&!n.test(e))return e;if(e.length>100)return e.replace(i,o);let t="",r=0;for(let n=0;n<e.length;n++){const i=e.charCodeAt(n);if(34===i||92===i||i<32)t+=`${e.slice(r,n)}${s[i]}`,r=n+1;else if(i>=55296&&i<=57343){if(i<=56319&&n+1<e.length){const t=e.charCodeAt(n+1);if(t>=56320&&t<=57343){n++;continue}}t+=`${e.slice(r,n)}\\u${i.toString(16)}`,r=n+1}}return t+=e.slice(r),t}function l(e){if(e.length>200)return e.sort();for(let t=1;t<e.length;t++){const r=e[t];let n=t;for(;0!==n&&e[n-1]>r;)e[n]=e[n-1],n--;e[n]=r}return e}const u=Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array)),Symbol.toStringTag).get;function c(e){return void 0!==u.call(e)&&0!==e.length}function f(e,t,r){e.length<r&&(r=e.length);const n=","===t?"":" ";let i=`"0":${n}${e[0]}`;for(let s=1;s<r;s++)i+=`${t}"${s}":${n}${e[s]}`;return i}function h(e,t){if(e&&Object.prototype.hasOwnProperty.call(e,t)){var r=e[t];if("boolean"!=typeof r)throw new TypeError(`The "${t}" argument must be of type boolean`)}return void 0===r||r}function d(e,t){if(e&&Object.prototype.hasOwnProperty.call(e,t)){var r=e[t];if("number"!=typeof r)throw new TypeError(`The "${t}" argument must be of type number`);if(!Number.isInteger(r))throw new TypeError(`The "${t}" argument must be an integer`);if(r<1)throw new RangeError(`The "${t}" argument must be >= 1`)}return void 0===r?1/0:r}function p(e){return 1===e?"1 item":`${e} items`}function g(e){const t=new Set;for(const r of e)"string"==typeof r?t.add(r):"number"==typeof r&&t.add(String(r));return t}function m(e){const t=function(e){if(e&&Object.prototype.hasOwnProperty.call(e,"circularValue")){var t=e.circularValue;if("string"==typeof t)return`"${t}"`;if(null==t)return t;if(t===Error||t===TypeError)return{toString(){throw new TypeError("Converting circular structure to JSON")}};throw new TypeError('The "circularValue" argument must be of type string or the value null or undefined')}return'"[Circular]"'}(e),r=h(e,"bigint"),n=h(e,"deterministic"),i=d(e,"maximumDepth"),s=d(e,"maximumBreadth");function o(e,u,h,d,g,m){let b=u[e];switch("object"==typeof b&&null!==b&&"function"==typeof b.toJSON&&(b=b.toJSON(e)),b=d.call(u,e,b),typeof b){case"string":return`"${a(b)}"`;case"object":{if(null===b)return"null";if(-1!==h.indexOf(b))return t;let e="",r=",";const u=m;if(Array.isArray(b)){if(0===b.length)return"[]";if(i<h.length+1)return'"[Array]"';h.push(b),""!==g&&(e+=`\n${m+=g}`,r=`,\n${m}`);const t=Math.min(b.length,s);let n=0;for(;n<t-1;n++){const t=o(n,b,h,d,g,m);e+=void 0!==t?t:"null",e+=r}const a=o(n,b,h,d,g,m);return e+=void 0!==a?a:"null",b.length-1>s&&(e+=`${r}"... ${p(b.length-s-1)} not stringified"`),""!==g&&(e+=`\n${u}`),h.pop(),`[${e}]`}let y=Object.keys(b);const v=y.length;if(0===v)return"{}";if(i<h.length+1)return'"[Object]"';let w="",_="";""!==g&&(r=`,\n${m+=g}`,w=" ");let S=Math.min(v,s);c(b)&&(e+=f(b,r,s),y=y.slice(b.length),S-=b.length,_=r),n&&(y=l(y)),h.push(b);for(let t=0;t<S;t++){const n=y[t],i=o(n,b,h,d,g,m);void 0!==i&&(e+=`${_}"${a(n)}":${w}${i}`,_=r)}return v>s&&(e+=`${_}"...":${w}"${p(v-s)} not stringified"`,_=r),""!==g&&_.length>1&&(e=`\n${m}${e}\n${u}`),h.pop(),`{${e}}`}case"number":return isFinite(b)?String(b):"null";case"boolean":return!0===b?"true":"false";case"bigint":return r?String(b):void 0}}function u(e,n,o,l,c,f){switch("object"==typeof n&&null!==n&&"function"==typeof n.toJSON&&(n=n.toJSON(e)),typeof n){case"string":return`"${a(n)}"`;case"object":{if(null===n)return"null";if(-1!==o.indexOf(n))return t;const e=f;let r="",h=",";if(Array.isArray(n)){if(0===n.length)return"[]";if(i<o.length+1)return'"[Array]"';o.push(n),""!==c&&(r+=`\n${f+=c}`,h=`,\n${f}`);const t=Math.min(n.length,s);let a=0;for(;a<t-1;a++){const e=u(a,n[a],o,l,c,f);r+=void 0!==e?e:"null",r+=h}const d=u(a,n[a],o,l,c,f);return r+=void 0!==d?d:"null",n.length-1>s&&(r+=`${h}"... ${p(n.length-s-1)} not stringified"`),""!==c&&(r+=`\n${e}`),o.pop(),`[${r}]`}if(0===l.size)return"{}";o.push(n);let d="";""!==c&&(h=`,\n${f+=c}`,d=" ");let g="";for(const e of l){const t=u(e,n[e],o,l,c,f);void 0!==t&&(r+=`${g}"${a(e)}":${d}${t}`,g=h)}return""!==c&&g.length>1&&(r=`\n${f}${r}\n${e}`),o.pop(),`{${r}}`}case"number":return isFinite(n)?String(n):"null";case"boolean":return!0===n?"true":"false";case"bigint":return r?String(n):void 0}}function m(e,o,u,h,d){switch(typeof o){case"string":return`"${a(o)}"`;case"object":{if(null===o)return"null";if("function"==typeof o.toJSON){if("object"!=typeof(o=o.toJSON(e)))return m(e,o,u,h,d);if(null===o)return"null"}if(-1!==u.indexOf(o))return t;const r=d;if(Array.isArray(o)){if(0===o.length)return"[]";if(i<u.length+1)return'"[Array]"';u.push(o);let e=`\n${d+=h}`;const t=`,\n${d}`,n=Math.min(o.length,s);let a=0;for(;a<n-1;a++){const r=m(a,o[a],u,h,d);e+=void 0!==r?r:"null",e+=t}const l=m(a,o[a],u,h,d);return e+=void 0!==l?l:"null",o.length-1>s&&(e+=`${t}"... ${p(o.length-s-1)} not stringified"`),e+=`\n${r}`,u.pop(),`[${e}]`}let g=Object.keys(o);const b=g.length;if(0===b)return"{}";if(i<u.length+1)return'"[Object]"';const y=`,\n${d+=h}`;let v="",w="",_=Math.min(b,s);c(o)&&(v+=f(o,y,s),g=g.slice(o.length),_-=o.length,w=y),n&&(g=l(g)),u.push(o);for(let e=0;e<_;e++){const t=g[e],r=m(t,o[t],u,h,d);void 0!==r&&(v+=`${w}"${a(t)}": ${r}`,w=y)}return b>s&&(v+=`${w}"...": "${p(b-s)} not stringified"`,w=y),""!==w&&(v=`\n${d}${v}\n${r}`),u.pop(),`{${v}}`}case"number":return isFinite(o)?String(o):"null";case"boolean":return!0===o?"true":"false";case"bigint":return r?String(o):void 0}}function b(e,o,u){switch(typeof o){case"string":return`"${a(o)}"`;case"object":{if(null===o)return"null";if("function"==typeof o.toJSON){if("object"!=typeof(o=o.toJSON(e)))return b(e,o,u);if(null===o)return"null"}if(-1!==u.indexOf(o))return t;let r="";if(Array.isArray(o)){if(0===o.length)return"[]";if(i<u.length+1)return'"[Array]"';u.push(o);const e=Math.min(o.length,s);let t=0;for(;t<e-1;t++){const e=b(t,o[t],u);r+=void 0!==e?e:"null",r+=","}const n=b(t,o[t],u);return r+=void 0!==n?n:"null",o.length-1>s&&(r+=`,"... ${p(o.length-s-1)} not stringified"`),u.pop(),`[${r}]`}let h=Object.keys(o);const d=h.length;if(0===d)return"{}";if(i<u.length+1)return'"[Object]"';let g="",m=Math.min(d,s);c(o)&&(r+=f(o,",",s),h=h.slice(o.length),m-=o.length,g=","),n&&(h=l(h)),u.push(o);for(let e=0;e<m;e++){const t=h[e],n=b(t,o[t],u);void 0!==n&&(r+=`${g}"${a(t)}":${n}`,g=",")}return d>s&&(r+=`${g}"...":"${p(d-s)} not stringified"`),u.pop(),`{${r}}`}case"number":return isFinite(o)?String(o):"null";case"boolean":return!0===o?"true":"false";case"bigint":return r?String(o):void 0}}return function(e,t,r){if(arguments.length>1){let n="";if("number"==typeof r?n=" ".repeat(Math.min(r,10)):"string"==typeof r&&(n=r.slice(0,10)),null!=t){if("function"==typeof t)return o("",{"":e},[],t,n,"");if(Array.isArray(t))return u("",e,[],g(t),n,"")}if(0!==n.length)return m("",e,[],n,"")}return b("",e,[])}}},4864:(e,t)=>{function r(e){for(var t in e)this[t]=e[t]}t.get=function(e){var r=Error.stackTraceLimit;Error.stackTraceLimit=1/0;var n={},i=Error.prepareStackTrace;Error.prepareStackTrace=function(e,t){return t},Error.captureStackTrace(n,e||t.get);var s=n.stack;return Error.prepareStackTrace=i,Error.stackTraceLimit=r,s},t.parse=function(e){if(!e.stack)return[];var t=this;return e.stack.split("\n").slice(1).map((function(e){if(e.match(/^\s*[-]{4,}$/))return t._createParsedCallSite({fileName:e,lineNumber:null,functionName:null,typeName:null,methodName:null,columnNumber:null,native:null});var r=e.match(/at (?:(.+)\s+\()?(?:(.+?):(\d+)(?::(\d+))?|([^)]+))\)?/);if(r){var n=null,i=null,s=null,o=null,a=null,l="native"===r[5];if(r[1]){var u=(s=r[1]).lastIndexOf(".");if("."==s[u-1]&&u--,u>0){n=s.substr(0,u),i=s.substr(u+1);var c=n.indexOf(".Module");c>0&&(s=s.substr(c+1),n=n.substr(0,c))}o=null}i&&(o=n,a=i),"<anonymous>"===i&&(a=null,s=null);var f={fileName:r[2]||null,lineNumber:parseInt(r[3],10)||null,functionName:s,typeName:o,methodName:a,columnNumber:parseInt(r[4],10)||null,native:l};return t._createParsedCallSite(f)}})).filter((function(e){return!!e}))},["this","typeName","functionName","methodName","fileName","lineNumber","columnNumber","function","evalOrigin"].forEach((function(e){r.prototype[e]=null,r.prototype["get"+e[0].toUpperCase()+e.substr(1)]=function(){return this[e]}})),["topLevel","eval","native","constructor"].forEach((function(e){r.prototype[e]=!1,r.prototype["is"+e[0].toUpperCase()+e.substr(1)]=function(){return this[e]}})),t._createParsedCallSite=function(e){return new r(e)}},8570:(e,t,r)=>{"use strict";var n=r(2673).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function s(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=l,this.end=u,t=4;break;case"utf8":this.fillLast=a,t=4;break;case"base64":this.text=c,this.end=f,t=3;break;default:return this.write=h,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function o(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function a(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function l(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function u(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function c(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function f(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function h(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.s=s,s.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},s.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},s.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=o(t[n]);return i>=0?(i>0&&(e.lastNeed=i-1),i):--n<r||-2===i?0:(i=o(t[n]))>=0?(i>0&&(e.lastNeed=i-2),i):--n<r||-2===i?0:(i=o(t[n]))>=0?(i>0&&(2===i?i=0:e.lastNeed=i-3),i):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},s.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},6578:(e,t)=>{"use strict";t.levels={error:0,warn:1,help:2,data:3,info:4,debug:5,prompt:6,verbose:7,input:8,silly:9},t.colors={error:"red",warn:"yellow",help:"cyan",data:"grey",info:"green",debug:"blue",prompt:"grey",verbose:"cyan",input:"grey",silly:"magenta"}},5422:(e,t,r)=>{"use strict";Object.defineProperty(t,"cli",{value:r(6578)}),Object.defineProperty(t,"npm",{value:r(7030)}),Object.defineProperty(t,"syslog",{value:r(8584)})},7030:(e,t)=>{"use strict";t.levels={error:0,warn:1,info:2,http:3,verbose:4,debug:5,silly:6},t.colors={error:"red",warn:"yellow",info:"green",http:"green",verbose:"cyan",debug:"blue",silly:"magenta"}},8584:(e,t)=>{"use strict";t.levels={emerg:0,alert:1,crit:2,error:3,warning:4,notice:5,info:6,debug:7},t.colors={emerg:"red",alert:"yellow",crit:"red",error:"red",warning:"red",notice:"yellow",info:"green",debug:"blue"}},8834:(e,t,r)=>{"use strict";Object.defineProperty(t,"LEVEL",{value:Symbol.for("level")}),Object.defineProperty(t,"MESSAGE",{value:Symbol.for("message")}),Object.defineProperty(t,"SPLAT",{value:Symbol.for("splat")}),Object.defineProperty(t,"configs",{value:r(5422)})},1118:(e,t,r)=>{e.exports=r(3837).deprecate},1313:(e,t,r)=>{"use strict";const n=r(3837),i=r(9123),{LEVEL:s}=r(8834),o=e.exports=function(e={}){i.call(this,{objectMode:!0,highWaterMark:e.highWaterMark}),this.format=e.format,this.level=e.level,this.handleExceptions=e.handleExceptions,this.handleRejections=e.handleRejections,this.silent=e.silent,e.log&&(this.log=e.log),e.logv&&(this.logv=e.logv),e.close&&(this.close=e.close),this.once("pipe",(e=>{this.levels=e.levels,this.parent=e})),this.once("unpipe",(e=>{e===this.parent&&(this.parent=null,this.close&&this.close())}))};n.inherits(o,i),o.prototype._write=function(e,t,r){if(this.silent||!0===e.exception&&!this.handleExceptions)return r(null);const n=this.level||this.parent&&this.parent.level;if(!n||this.levels[n]>=this.levels[e[s]]){if(e&&!this.format)return this.log(e,r);let t,n;try{n=this.format.transform(Object.assign({},e),this.format.options)}catch(e){t=e}if(t||!n){if(r(),t)throw t;return}return this.log(n,r)}return this._writableState.sync=!1,r(null)},o.prototype._writev=function(e,t){if(this.logv){const r=e.filter(this._accept,this);return r.length?this.logv(r,t):t(null)}for(let r=0;r<e.length;r++){if(!this._accept(e[r]))continue;if(e[r].chunk&&!this.format){this.log(e[r].chunk,e[r].callback);continue}let n,i;try{i=this.format.transform(Object.assign({},e[r].chunk),this.format.options)}catch(e){n=e}if(n||!i){if(e[r].callback(),n)throw t(null),n}else this.log(i,e[r].callback)}return t(null)},o.prototype._accept=function(e){const t=e.chunk;if(this.silent)return!1;const r=this.level||this.parent&&this.parent.level;return!(!0!==t.exception&&r&&!(this.levels[r]>=this.levels[t[s]])||!this.handleExceptions&&!0===t.exception)},o.prototype._nop=function(){},e.exports.LegacyTransportStream=r(2787)},2787:(e,t,r)=>{"use strict";const n=r(3837),{LEVEL:i}=r(8834),s=r(1313),o=e.exports=function(e={}){if(s.call(this,e),!e.transport||"function"!=typeof e.transport.log)throw new Error("Invalid transport, must be an object with a log method.");this.transport=e.transport,this.level=this.level||e.transport.level,this.handleExceptions=this.handleExceptions||e.transport.handleExceptions,this._deprecated(),this.transport.__winstonError||(this.transport.__winstonError=function(e){this.emit("error",e,this.transport)}.bind(this),this.transport.on("error",this.transport.__winstonError))};n.inherits(o,s),o.prototype._write=function(e,t,r){if(this.silent||!0===e.exception&&!this.handleExceptions)return r(null);(!this.level||this.levels[this.level]>=this.levels[e[i]])&&this.transport.log(e[i],e.message,e,this._nop),r(null)},o.prototype._writev=function(e,t){for(let t=0;t<e.length;t++)this._accept(e[t])&&(this.transport.log(e[t].chunk[i],e[t].chunk.message,e[t].chunk,this._nop),e[t].callback());return t(null)},o.prototype._deprecated=function(){console.error([`${this.transport.name} is a legacy winston transport. Consider upgrading: `,"- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md"].join("\n"))},o.prototype.close=function(){this.transport.close&&this.transport.close(),this.transport.__winstonError&&(this.transport.removeListener("error",this.transport.__winstonError),this.transport.__winstonError=null)}},5439:(e,t,r)=>{"use strict";const n=r(8586),{warn:i}=r(7875);t.version=r(8380).version,t.transports=r(1523),t.config=r(7410),t.addColors=n.levels,t.format=n.format,t.createLogger=r(1306),t.ExceptionHandler=r(9117),t.RejectionHandler=r(9369),t.Container=r(5213),t.Transport=r(1313),t.loggers=new t.Container;const s=t.createLogger();Object.keys(t.config.npm.levels).concat(["log","query","stream","add","remove","clear","profile","startTimer","handleExceptions","unhandleExceptions","handleRejections","unhandleRejections","configure","child"]).forEach((e=>t[e]=(...t)=>s[e](...t))),Object.defineProperty(t,"level",{get:()=>s.level,set(e){s.level=e}}),Object.defineProperty(t,"exceptions",{get:()=>s.exceptions}),["exitOnError"].forEach((e=>{Object.defineProperty(t,e,{get:()=>s[e],set(t){s[e]=t}})})),Object.defineProperty(t,"default",{get:()=>({exceptionHandlers:s.exceptionHandlers,rejectionHandlers:s.rejectionHandlers,transports:s.transports})}),i.deprecated(t,"setLevels"),i.forFunctions(t,"useFormat",["cli"]),i.forProperties(t,"useFormat",["padLevels","stripColors"]),i.forFunctions(t,"deprecated",["addRewriter","addFilter","clone","extend"]),i.forProperties(t,"deprecated",["emitErrs","levelLength"]),i.moved(t,"createLogger","Logger")},7875:(e,t,r)=>{"use strict";const{format:n}=r(3837);t.warn={deprecated:e=>()=>{throw new Error(n("{ %s } was removed in winston@3.0.0.",e))},useFormat:e=>()=>{throw new Error([n("{ %s } was removed in winston@3.0.0.",e),"Use a custom winston.format = winston.format(function) instead."].join("\n"))},forFunctions(e,r,n){n.forEach((n=>{e[n]=t.warn[r](n)}))},moved(e,t,r){function i(){return()=>{throw new Error([n("winston.%s was moved in winston@3.0.0.",r),n("Use a winston.%s instead.",t)].join("\n"))}}Object.defineProperty(e,r,{get:i,set:i})},forProperties(e,r,n){n.forEach((n=>{const i=t.warn[r](n);Object.defineProperty(e,n,{get:i,set:i})}))}}},7410:(e,t,r)=>{"use strict";const n=r(8586),{configs:i}=r(8834);t.cli=n.levels(i.cli),t.npm=n.levels(i.npm),t.syslog=n.levels(i.syslog),t.addColors=n.levels},5213:(e,t,r)=>{"use strict";const n=r(1306);e.exports=class{constructor(e={}){this.loggers=new Map,this.options=e}add(e,t){if(!this.loggers.has(e)){const r=(t=Object.assign({},t||this.options)).transports||this.options.transports;t.transports=r?r.slice():[];const i=n(t);i.on("close",(()=>this._delete(e))),this.loggers.set(e,i)}return this.loggers.get(e)}get(e,t){return this.add(e,t)}has(e){return!!this.loggers.has(e)}close(e){if(e)return this._removeLogger(e);this.loggers.forEach(((e,t)=>this._removeLogger(t)))}_removeLogger(e){this.loggers.has(e)&&(this.loggers.get(e).close(),this._delete(e))}_delete(e){this.loggers.delete(e)}}},1306:(e,t,r)=>{"use strict";const{LEVEL:n}=r(8834),i=r(7410),s=r(3358),o=r(952)("winston:create-logger");e.exports=function(e={}){e.levels=e.levels||i.npm.levels;class t extends s{constructor(e){super(e)}}const r=new t(e);return Object.keys(e.levels).forEach((function(e){o('Define prototype method for "%s"',e),"log"!==e?(t.prototype[e]=function(...t){const i=this||r;if(1===t.length){const[s]=t,o=s&&s.message&&s||{message:s};return o.level=o[n]=e,i._addDefaultMeta(o),i.write(o),this||r}return 0===t.length?(i.log(e,""),i):i.log(e,...t)},t.prototype[function(e){return"is"+e.charAt(0).toUpperCase()+e.slice(1)+"Enabled"}(e)]=function(){return(this||r).isLevelEnabled(e)}):console.warn('Level "log" not defined: conflicts with the method "log". Use a different level name.')})),r}},9117:(e,t,r)=>{"use strict";const n=r(2037),i=r(230),s=r(952)("winston:exception"),o=r(6586),a=r(4864),l=r(1352);e.exports=class{constructor(e){if(!e)throw new Error("Logger is required to handle exceptions");this.logger=e,this.handlers=new Map}handle(...e){e.forEach((e=>{if(Array.isArray(e))return e.forEach((e=>this._addHandler(e)));this._addHandler(e)})),this.catcher||(this.catcher=this._uncaughtException.bind(this),process.on("uncaughtException",this.catcher))}unhandle(){this.catcher&&(process.removeListener("uncaughtException",this.catcher),this.catcher=!1,Array.from(this.handlers.values()).forEach((e=>this.logger.unpipe(e))))}getAllInfo(e){let{message:t}=e;return t||"string"!=typeof e||(t=e),{error:e,level:"error",message:[`uncaughtException: ${t||"(no error message)"}`,e.stack||"  No stack trace"].join("\n"),stack:e.stack,exception:!0,date:(new Date).toString(),process:this.getProcessInfo(),os:this.getOsInfo(),trace:this.getTrace(e)}}getProcessInfo(){return{pid:process.pid,uid:process.getuid?process.getuid():null,gid:process.getgid?process.getgid():null,cwd:process.cwd(),execPath:process.execPath,version:process.version,argv:process.argv,memoryUsage:process.memoryUsage()}}getOsInfo(){return{loadavg:n.loadavg(),uptime:n.uptime()}}getTrace(e){return(e?a.parse(e):a.get()).map((e=>({column:e.getColumnNumber(),file:e.getFileName(),function:e.getFunctionName(),line:e.getLineNumber(),method:e.getMethodName(),native:e.isNative()})))}_addHandler(e){if(!this.handlers.has(e)){e.handleExceptions=!0;const t=new l(e);this.handlers.set(e,t),this.logger.pipe(t)}}_uncaughtException(e){const t=this.getAllInfo(e),r=this._getExceptionHandlers();let n,a="function"==typeof this.logger.exitOnError?this.logger.exitOnError(e):this.logger.exitOnError;function l(){s("doExit",a),s("process._exiting",process._exiting),a&&!process._exiting&&(n&&clearTimeout(n),process.exit(1))}if(!r.length&&a&&(console.warn("winston: exitOnError cannot be true with no exception handlers."),console.warn("winston: not exiting process."),a=!1),!r||0===r.length)return process.nextTick(l);i(r,((e,t)=>{const r=o(t),n=e.transport||e;function i(e){return()=>{s(e),r()}}n._ending=!0,n.once("finish",i("finished")),n.once("error",i("error"))}),(()=>a&&l())),this.logger.log(t),a&&(n=setTimeout(l,3e3))}_getExceptionHandlers(){return this.logger.transports.filter((e=>(e.transport||e).handleExceptions))}}},1352:(e,t,r)=>{"use strict";const{Writable:n}=r(1449);e.exports=class extends n{constructor(e){if(super({objectMode:!0}),!e)throw new Error("ExceptionStream requires a TransportStream instance.");this.handleExceptions=!0,this.transport=e}_write(e,t,r){return e.exception?this.transport.log(e,r):(r(),!0)}}},3358:(e,t,r)=>{"use strict";const{Stream:n,Transform:i}=r(1449),s=r(230),{LEVEL:o,SPLAT:a}=r(8834),l=r(200),u=r(9117),c=r(9369),f=r(2787),h=r(6675),{warn:d}=r(7875),p=r(7410),g=/%[scdjifoO%]/g;class m extends i{constructor(e){super({objectMode:!0}),this.configure(e)}child(e){const t=this;return Object.create(t,{write:{value:function(r){const n=Object.assign({},e,r);r instanceof Error&&(n.stack=r.stack,n.message=r.message),t.write(n)}}})}configure({silent:e,format:t,defaultMeta:n,levels:i,level:s="info",exitOnError:o=!0,transports:a,colors:l,emitErrs:f,formatters:h,padLevels:d,rewriters:g,stripColors:m,exceptionHandlers:b,rejectionHandlers:y}={}){if(this.transports.length&&this.clear(),this.silent=e,this.format=t||this.format||r(4342)(),this.defaultMeta=n||null,this.levels=i||this.levels||p.npm.levels,this.level=s,this.exceptions&&this.exceptions.unhandle(),this.rejections&&this.rejections.unhandle(),this.exceptions=new u(this),this.rejections=new c(this),this.profilers={},this.exitOnError=o,a&&(a=Array.isArray(a)?a:[a]).forEach((e=>this.add(e))),l||f||h||d||g||m)throw new Error(["{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.","Use a custom winston.format(function) instead.","See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"].join("\n"));b&&this.exceptions.handle(b),y&&this.rejections.handle(y)}isLevelEnabled(e){const t=b(this.levels,e);if(null===t)return!1;const r=b(this.levels,this.level);return null!==r&&(this.transports&&0!==this.transports.length?-1!==this.transports.findIndex((e=>{let n=b(this.levels,e.level);return null===n&&(n=r),n>=t})):r>=t)}log(e,t,...r){if(1===arguments.length)return e[o]=e.level,this._addDefaultMeta(e),this.write(e),this;if(2===arguments.length)return t&&"object"==typeof t?(t[o]=t.level=e,this._addDefaultMeta(t),this.write(t),this):(t={[o]:e,level:e,message:t},this._addDefaultMeta(t),this.write(t),this);const[n]=r;if("object"==typeof n&&null!==n&&!(t&&t.match&&t.match(g))){const i=Object.assign({},this.defaultMeta,n,{[o]:e,[a]:r,level:e,message:t});return n.message&&(i.message=`${i.message} ${n.message}`),n.stack&&(i.stack=n.stack),this.write(i),this}return this.write(Object.assign({},this.defaultMeta,{[o]:e,[a]:r,level:e,message:t})),this}_transform(e,t,r){if(this.silent)return r();e[o]||(e[o]=e.level),this.levels[e[o]]||0===this.levels[e[o]]||console.error("[winston] Unknown logger level: %s",e[o]),this._readableState.pipes||console.error("[winston] Attempt to write logs with no transports %j",e);try{this.push(this.format.transform(e,this.format.options))}finally{this._writableState.sync=!1,r()}}_final(e){const t=this.transports.slice();s(t,((e,t)=>{if(!e||e.finished)return setImmediate(t);e.once("finish",t),e.end()}),e)}add(e){const t=!l(e)||e.log.length>2?new f({transport:e}):e;if(!t._writableState||!t._writableState.objectMode)throw new Error("Transports must WritableStreams in objectMode. Set { objectMode: true }.");return this._onEvent("error",t),this._onEvent("warn",t),this.pipe(t),e.handleExceptions&&this.exceptions.handle(),e.handleRejections&&this.rejections.handle(),this}remove(e){if(!e)return this;let t=e;return(!l(e)||e.log.length>2)&&(t=this.transports.filter((t=>t.transport===e))[0]),t&&this.unpipe(t),this}clear(){return this.unpipe(),this}close(){return this.exceptions.unhandle(),this.rejections.unhandle(),this.clear(),this.emit("close"),this}setLevels(){d.deprecated("setLevels")}query(e,t){"function"==typeof e&&(t=e,e={}),e=e||{};const r={},n=Object.assign({},e.query||{});s(this.transports.filter((e=>!!e.query)),(function(t,i){!function(t,r){e.query&&"function"==typeof t.formatQuery&&(e.query=t.formatQuery(n)),t.query(e,((n,i)=>{if(n)return r(n);"function"==typeof t.formatResults&&(i=t.formatResults(i,e.format)),r(null,i)}))}(t,((e,n)=>{i&&((n=e||n)&&(r[t.name]=n),i()),i=null}))}),(()=>t(null,r)))}stream(e={}){const t=new n,r=[];return t._streams=r,t.destroy=()=>{let e=r.length;for(;e--;)r[e].destroy()},this.transports.filter((e=>!!e.stream)).forEach((n=>{const i=n.stream(e);i&&(r.push(i),i.on("log",(e=>{e.transport=e.transport||[],e.transport.push(n.name),t.emit("log",e)})),i.on("error",(e=>{e.transport=e.transport||[],e.transport.push(n.name),t.emit("error",e)})))})),t}startTimer(){return new h(this)}profile(e,...t){const r=Date.now();if(this.profilers[e]){const n=this.profilers[e];delete this.profilers[e],"function"==typeof t[t.length-2]&&(console.warn("Callback function no longer supported as of winston@3.0.0"),t.pop());const i="object"==typeof t[t.length-1]?t.pop():{};return i.level=i.level||"info",i.durationMs=r-n,i.message=i.message||e,this.write(i)}return this.profilers[e]=r,this}handleExceptions(...e){console.warn("Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()"),this.exceptions.handle(...e)}unhandleExceptions(...e){console.warn("Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()"),this.exceptions.unhandle(...e)}cli(){throw new Error(["Logger.cli() was removed in winston@3.0.0","Use a custom winston.formats.cli() instead.","See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"].join("\n"))}_onEvent(e,t){t["__winston"+e]||(t["__winston"+e]=function(r){"error"!==e||this.transports.includes(t)||this.add(t),this.emit(e,r,t)}.bind(this),t.on(e,t["__winston"+e]))}_addDefaultMeta(e){this.defaultMeta&&Object.assign(e,this.defaultMeta)}}function b(e,t){const r=e[t];return r||0===r?r:null}Object.defineProperty(m.prototype,"transports",{configurable:!1,enumerable:!0,get(){const{pipes:e}=this._readableState;return Array.isArray(e)?e:[e].filter(Boolean)}}),e.exports=m},6675:e=>{"use strict";e.exports=class{constructor(e){if(!e)throw new Error("Logger is required for profiling.");this.logger=e,this.start=Date.now()}done(...e){"function"==typeof e[e.length-1]&&(console.warn("Callback function no longer supported as of winston@3.0.0"),e.pop());const t="object"==typeof e[e.length-1]?e.pop():{};return t.level=t.level||"info",t.durationMs=Date.now()-this.start,this.logger.write(t)}}},9369:(e,t,r)=>{"use strict";const n=r(2037),i=r(230),s=r(952)("winston:rejection"),o=r(6586),a=r(4864),l=r(1352);e.exports=class{constructor(e){if(!e)throw new Error("Logger is required to handle rejections");this.logger=e,this.handlers=new Map}handle(...e){e.forEach((e=>{if(Array.isArray(e))return e.forEach((e=>this._addHandler(e)));this._addHandler(e)})),this.catcher||(this.catcher=this._unhandledRejection.bind(this),process.on("unhandledRejection",this.catcher))}unhandle(){this.catcher&&(process.removeListener("unhandledRejection",this.catcher),this.catcher=!1,Array.from(this.handlers.values()).forEach((e=>this.logger.unpipe(e))))}getAllInfo(e){let t=null;return e&&(t="string"==typeof e?e:e.message),{error:e,level:"error",message:[`unhandledRejection: ${t||"(no error message)"}`,e&&e.stack||"  No stack trace"].join("\n"),stack:e&&e.stack,exception:!0,date:(new Date).toString(),process:this.getProcessInfo(),os:this.getOsInfo(),trace:this.getTrace(e)}}getProcessInfo(){return{pid:process.pid,uid:process.getuid?process.getuid():null,gid:process.getgid?process.getgid():null,cwd:process.cwd(),execPath:process.execPath,version:process.version,argv:process.argv,memoryUsage:process.memoryUsage()}}getOsInfo(){return{loadavg:n.loadavg(),uptime:n.uptime()}}getTrace(e){return(e?a.parse(e):a.get()).map((e=>({column:e.getColumnNumber(),file:e.getFileName(),function:e.getFunctionName(),line:e.getLineNumber(),method:e.getMethodName(),native:e.isNative()})))}_addHandler(e){if(!this.handlers.has(e)){e.handleRejections=!0;const t=new l(e);this.handlers.set(e,t),this.logger.pipe(t)}}_unhandledRejection(e){const t=this.getAllInfo(e),r=this._getRejectionHandlers();let n,a="function"==typeof this.logger.exitOnError?this.logger.exitOnError(e):this.logger.exitOnError;function l(){s("doExit",a),s("process._exiting",process._exiting),a&&!process._exiting&&(n&&clearTimeout(n),process.exit(1))}if(!r.length&&a&&(console.warn("winston: exitOnError cannot be true with no rejection handlers."),console.warn("winston: not exiting process."),a=!1),!r||0===r.length)return process.nextTick(l);i(r,((e,t)=>{const r=o(t),n=e.transport||e;function i(e){return()=>{s(e),r()}}n._ending=!0,n.once("finish",i("finished")),n.once("error",i("error"))}),(()=>a&&l())),this.logger.log(t),a&&(n=setTimeout(l,3e3))}_getRejectionHandlers(){return this.logger.transports.filter((e=>(e.transport||e).handleRejections))}}},4042:(e,t,r)=>{"use strict";const n=r(7147),{StringDecoder:i}=r(1576),{Stream:s}=r(1449);function o(){}e.exports=(e,t)=>{const r=Buffer.alloc(65536),a=new i("utf8"),l=new s;let u="",c=0,f=0;return-1===e.start&&delete e.start,l.readable=!0,l.destroy=()=>{l.destroyed=!0,l.emit("end"),l.emit("close")},n.open(e.file,"a+","0644",((i,s)=>{if(i)return t?t(i):l.emit("error",i),void l.destroy();!function i(){if(!l.destroyed)return n.read(s,r,0,r.length,c,((n,s)=>{if(n)return t?t(n):l.emit("error",n),void l.destroy();if(!s)return u&&((null==e.start||f>e.start)&&(t?t(null,u):l.emit("line",u)),f++,u=""),setTimeout(i,1e3);let o=a.write(r.slice(0,s));t||l.emit("data",o),o=(u+o).split(/\n+/);const h=o.length-1;let d=0;for(;d<h;d++)(null==e.start||f>e.start)&&(t?t(null,o[d]):l.emit("line",o[d])),f++;return u=o[h],c+=s,i()}));n.close(s,o)}()})),t?l.destroy:l}},5154:(e,t,r)=>{"use strict";const n=r(2037),{LEVEL:i,MESSAGE:s}=r(8834),o=r(1313);e.exports=class extends o{constructor(e={}){super(e),this.name=e.name||"console",this.stderrLevels=this._stringArrayToSet(e.stderrLevels),this.consoleWarnLevels=this._stringArrayToSet(e.consoleWarnLevels),this.eol="string"==typeof e.eol?e.eol:n.EOL,this.setMaxListeners(30)}log(e,t){return setImmediate((()=>this.emit("logged",e))),this.stderrLevels[e[i]]?(console._stderr?console._stderr.write(`${e[s]}${this.eol}`):console.error(e[s]),void(t&&t())):this.consoleWarnLevels[e[i]]?(console._stderr?console._stderr.write(`${e[s]}${this.eol}`):console.warn(e[s]),void(t&&t())):(console._stdout?console._stdout.write(`${e[s]}${this.eol}`):console.log(e[s]),void(t&&t()))}_stringArrayToSet(e,t){if(!e)return{};if(t=t||"Cannot make set from type other than Array of string elements",!Array.isArray(e))throw new Error(t);return e.reduce(((e,r)=>{if("string"!=typeof r)throw new Error(t);return e[r]=!0,e}),{})}}},3452:(e,t,r)=>{"use strict";const n=r(7147),i=r(1017),s=r(8563),o=r(9796),{MESSAGE:a}=r(8834),{Stream:l,PassThrough:u}=r(1449),c=r(1313),f=r(952)("winston:file"),h=r(2037),d=r(4042);e.exports=class extends c{constructor(e={}){function t(t,...r){r.slice(1).forEach((r=>{if(e[r])throw new Error(`Cannot set ${r} and ${t} together`)}))}if(super(e),this.name=e.name||"file",this._stream=new u,this._stream.setMaxListeners(30),this._onError=this._onError.bind(this),e.filename||e.dirname)t("filename or dirname","stream"),this._basename=this.filename=e.filename?i.basename(e.filename):"winston.log",this.dirname=e.dirname||i.dirname(e.filename),this.options=e.options||{flags:"a"};else{if(!e.stream)throw new Error("Cannot log to file without filename or stream.");console.warn("options.stream will be removed in winston@4. Use winston.transports.Stream"),t("stream","filename","maxsize"),this._dest=this._stream.pipe(this._setupStream(e.stream)),this.dirname=i.dirname(this._dest.path)}this.maxsize=e.maxsize||null,this.rotationFormat=e.rotationFormat||!1,this.zippedArchive=e.zippedArchive||!1,this.maxFiles=e.maxFiles||null,this.eol="string"==typeof e.eol?e.eol:h.EOL,this.tailable=e.tailable||!1,this._size=0,this._pendingSize=0,this._created=0,this._drain=!1,this._opening=!1,this._ending=!1,this.dirname&&this._createLogDirIfNotExist(this.dirname),this.open()}finishIfEnding(){this._ending&&(this._opening?this.once("open",(()=>{this._stream.once("finish",(()=>this.emit("finish"))),setImmediate((()=>this._stream.end()))})):(this._stream.once("finish",(()=>this.emit("finish"))),setImmediate((()=>this._stream.end()))))}log(e,t=(()=>{})){if(this.silent)return t(),!0;if(this._drain)return void this._stream.once("drain",(()=>{this._drain=!1,this.log(e,t)}));if(this._rotate)return void this._stream.once("rotate",(()=>{this._rotate=!1,this.log(e,t)}));const r=`${e[a]}${this.eol}`,n=Buffer.byteLength(r);this._pendingSize+=n,this._opening&&!this.rotatedWhileOpening&&this._needsNewFile(this._size+this._pendingSize)&&(this.rotatedWhileOpening=!0);const i=this._stream.write(r,function(){this._size+=n,this._pendingSize-=n,f("logged %s %s",this._size,r),this.emit("logged",e),this._opening||this._needsNewFile()&&(this._rotate=!0,this._endStream((()=>this._rotateFile())))}.bind(this));return i?t():(this._drain=!0,this._stream.once("drain",(()=>{this._drain=!1,t()}))),f("written",i,this._drain),this.finishIfEnding(),i}query(e,t){"function"==typeof e&&(t=e,e={}),e=function(e){return(e=e||{}).rows=e.rows||e.limit||10,e.start=e.start||0,e.until=e.until||new Date,"object"!=typeof e.until&&(e.until=new Date(e.until)),e.from=e.from||e.until-864e5,"object"!=typeof e.from&&(e.from=new Date(e.from)),e.order=e.order||"desc",e}(e);const r=i.join(this.dirname,this.filename);let s="",o=[],a=0;const l=n.createReadStream(r,{encoding:"utf8"});function u(t,r){try{const r=JSON.parse(t);(function(t){if(!t)return;if("object"!=typeof t)return;const r=new Date(t.timestamp);return!(e.from&&r<e.from||e.until&&r>e.until||e.level&&e.level!==t.level)||void 0})(r)&&function(t){e.rows&&o.length>=e.rows&&"desc"!==e.order?l.readable&&l.destroy():(e.fields&&(t=e.fields.reduce(((e,r)=>(e[r]=t[r],e)),{})),"desc"===e.order&&o.length>=e.rows&&o.shift(),o.push(t))}(r)}catch(e){r||l.emit("error",e)}}l.on("error",(e=>{if(l.readable&&l.destroy(),t)return"ENOENT"!==e.code?t(e):t(null,o)})),l.on("data",(t=>{const r=(t=(s+t).split(/\n+/)).length-1;let n=0;for(;n<r;n++)(!e.start||a>=e.start)&&u(t[n]),a++;s=t[r]})),l.on("close",(()=>{s&&u(s,!0),"desc"===e.order&&(o=o.reverse()),t&&t(null,o)}))}stream(e={}){const t=i.join(this.dirname,this.filename),r=new l,n={file:t,start:e.start};return r.destroy=d(n,((e,t)=>{if(e)return r.emit("error",e);try{r.emit("data",t),t=JSON.parse(t),r.emit("log",t)}catch(e){r.emit("error",e)}})),r}open(){this.filename&&(this._opening||(this._opening=!0,this.stat(((e,t)=>{if(e)return this.emit("error",e);f("stat done: %s { size: %s }",this.filename,t),this._size=t,this._dest=this._createStream(this._stream),this._opening=!1,this.once("open",(()=>{this._stream.eventNames().includes("rotate")?this._stream.emit("rotate"):this._rotate=!1}))}))))}stat(e){const t=this._getFile(),r=i.join(this.dirname,t);n.stat(r,((n,i)=>n&&"ENOENT"===n.code?(f("ENOENT ok",r),this.filename=t,e(null,0)):n?(f(`err ${n.code} ${r}`),e(n)):!i||this._needsNewFile(i.size)?this._incFile((()=>this.stat(e))):(this.filename=t,void e(null,i.size))))}close(e){this._stream&&this._stream.end((()=>{e&&e(),this.emit("flush"),this.emit("closed")}))}_needsNewFile(e){return e=e||this._size,this.maxsize&&e>=this.maxsize}_onError(e){this.emit("error",e)}_setupStream(e){return e.on("error",this._onError),e}_cleanupStream(e){return e.removeListener("error",this._onError),e}_rotateFile(){this._incFile((()=>this.open()))}_endStream(e=(()=>{})){this._dest?(this._stream.unpipe(this._dest),this._dest.end((()=>{this._cleanupStream(this._dest),e()}))):e()}_createStream(e){const t=i.join(this.dirname,this.filename);f("create stream start",t,this.options);const r=n.createWriteStream(t,this.options).on("error",(e=>f(e))).on("close",(()=>f("close",r.path,r.bytesWritten))).on("open",(()=>{f("file open ok",t),this.emit("open",t),e.pipe(r),this.rotatedWhileOpening&&(this._stream=new u,this._stream.setMaxListeners(30),this._rotateFile(),this.rotatedWhileOpening=!1,this._cleanupStream(r),e.end())}));if(f("create stream ok",t),this.zippedArchive){const e=o.createGzip();return e.pipe(r),e}return r}_incFile(e){f("_incFile",this.filename);const t=i.extname(this._basename),r=i.basename(this._basename,t);this.tailable?this._checkMaxFilesTailable(t,r,e):(this._created+=1,this._checkMaxFilesIncrementing(t,r,e))}_getFile(){const e=i.extname(this._basename),t=i.basename(this._basename,e),r=this.rotationFormat?this.rotationFormat():this._created,n=!this.tailable&&this._created?`${t}${r}${e}`:`${t}${e}`;return this.zippedArchive&&!this.tailable?`${n}.gz`:n}_checkMaxFilesIncrementing(e,t,r){if(!this.maxFiles||this._created<this.maxFiles)return setImmediate(r);const s=this._created-this.maxFiles,o=`${t}${0!==s?s:""}${e}${this.zippedArchive?".gz":""}`,a=i.join(this.dirname,o);n.unlink(a,r)}_checkMaxFilesTailable(e,t,r){const o=[];if(!this.maxFiles)return;const a=this.zippedArchive?".gz":"";for(let r=this.maxFiles-1;r>1;r--)o.push(function(r,s){let o=`${t}${r-1}${e}${a}`;const l=i.join(this.dirname,o);n.exists(l,(u=>{if(!u)return s(null);o=`${t}${r}${e}${a}`,n.rename(l,i.join(this.dirname,o),s)}))}.bind(this,r));s(o,(()=>{n.rename(i.join(this.dirname,`${t}${e}`),i.join(this.dirname,`${t}1${e}${a}`),r)}))}_createLogDirIfNotExist(e){n.existsSync(e)||n.mkdirSync(e,{recursive:!0})}}},7725:(e,t,r)=>{"use strict";const n=r(3685),i=r(5687),{Stream:s}=r(1449),o=r(1313),a=r(7954);e.exports=class extends o{constructor(e={}){super(e),this.options=e,this.name=e.name||"http",this.ssl=!!e.ssl,this.host=e.host||"localhost",this.port=e.port,this.auth=e.auth,this.path=e.path||"",this.agent=e.agent,this.headers=e.headers||{},this.headers["content-type"]="application/json",this.batch=e.batch||!1,this.batchInterval=e.batchInterval||5e3,this.batchCount=e.batchCount||10,this.batchOptions=[],this.batchTimeoutID=-1,this.batchCallback={},this.port||(this.port=this.ssl?443:80)}log(e,t){this._request(e,((t,r)=>{r&&200!==r.statusCode&&(t=new Error(`Invalid HTTP Status Code: ${r.statusCode}`)),t?this.emit("warn",t):this.emit("logged",e)})),t&&setImmediate(t)}query(e,t){"function"==typeof e&&(t=e,e={}),(e={method:"query",params:this.normalizeQuery(e)}).params.path&&(e.path=e.params.path,delete e.params.path),e.params.auth&&(e.auth=e.params.auth,delete e.params.auth),this._request(e,((e,r,n)=>{if(r&&200!==r.statusCode&&(e=new Error(`Invalid HTTP Status Code: ${r.statusCode}`)),e)return t(e);if("string"==typeof n)try{n=JSON.parse(n)}catch(e){return t(e)}t(null,n)}))}stream(e={}){const t=new s;(e={method:"stream",params:e}).params.path&&(e.path=e.params.path,delete e.params.path),e.params.auth&&(e.auth=e.params.auth,delete e.params.auth);let r="";const n=this._request(e);return t.destroy=()=>n.destroy(),n.on("data",(e=>{const n=(e=(r+e).split(/\n+/)).length-1;let i=0;for(;i<n;i++)try{t.emit("log",JSON.parse(e[i]))}catch(e){t.emit("error",e)}r=e[n]})),n.on("error",(e=>t.emit("error",e))),t}_request(e,t){const r=(e=e||{}).auth||this.auth,n=e.path||this.path||"";delete e.auth,delete e.path,this.batch?this._doBatch(e,t,r,n):this._doRequest(e,t,r,n)}_doBatch(e,t,r,n){if(this.batchOptions.push(e),1===this.batchOptions.length){const e=this;this.batchCallback=t,this.batchTimeoutID=setTimeout((function(){e.batchTimeoutID=-1,e._doBatchRequest(e.batchCallback,r,n)}),this.batchInterval)}this.batchOptions.length===this.batchCount&&this._doBatchRequest(this.batchCallback,r,n)}_doBatchRequest(e,t,r){this.batchTimeoutID>0&&(clearTimeout(this.batchTimeoutID),this.batchTimeoutID=-1);const n=this.batchOptions.slice();this.batchOptions=[],this._doRequest(n,e,t,r)}_doRequest(e,t,r,s){const o=Object.assign({},this.headers);r&&r.bearer&&(o.Authorization=`Bearer ${r.bearer}`);const l=(this.ssl?i:n).request({...this.options,method:"POST",host:this.host,port:this.port,path:`/${s.replace(/^\//,"")}`,headers:o,auth:r&&r.username&&r.password?`${r.username}:${r.password}`:"",agent:this.agent});l.on("error",t),l.on("response",(e=>e.on("end",(()=>t(null,e))).resume())),l.end(Buffer.from(a(e),"utf8"))}}},1523:(e,t,r)=>{"use strict";Object.defineProperty(t,"Console",{configurable:!0,enumerable:!0,get:()=>r(5154)}),Object.defineProperty(t,"File",{configurable:!0,enumerable:!0,get:()=>r(3452)}),Object.defineProperty(t,"Http",{configurable:!0,enumerable:!0,get:()=>r(7725)}),Object.defineProperty(t,"Stream",{configurable:!0,enumerable:!0,get:()=>r(7459)})},7459:(e,t,r)=>{"use strict";const n=r(200),{MESSAGE:i}=r(8834),s=r(2037),o=r(1313);e.exports=class extends o{constructor(e={}){if(super(e),!e.stream||!n(e.stream))throw new Error("options.stream is required.");this._stream=e.stream,this._stream.setMaxListeners(1/0),this.isObjectMode=e.stream._writableState.objectMode,this.eol="string"==typeof e.eol?e.eol:s.EOL}log(e,t){if(setImmediate((()=>this.emit("logged",e))),this.isObjectMode)return this._stream.write(e),void(t&&t());this._stream.write(`${e[i]}${this.eol}`),t&&t()}}},200:e=>{"use strict";const t=e=>null!==e&&"object"==typeof e&&"function"==typeof e.pipe;t.writable=e=>t(e)&&!1!==e.writable&&"function"==typeof e._write&&"object"==typeof e._writableState,t.readable=e=>t(e)&&!1!==e.readable&&"function"==typeof e._read&&"object"==typeof e._readableState,t.duplex=e=>t.writable(e)&&t.readable(e),t.transform=e=>t.duplex(e)&&"function"==typeof e._transform,e.exports=t},5759:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{l(n.next(e))}catch(e){s(e)}}function a(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}l((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.awsHelloHandler=void 0;const i=r(2264),s=r(1414);t.awsHelloHandler=(e,t)=>n(void 0,void 0,void 0,(function*(){return(0,i.baseHelloHandler)((0,s.awsToBaseEvent)(e),(0,s.awsToBaseContext)(t)).then((e=>(0,s.baseToAwsResult)(e)))}))},2264:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{l(n.next(e))}catch(e){s(e)}}function a(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}l((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.baseHelloHandler=void 0;const i=new(r(1833).Logger)("hello");t.baseHelloHandler=(e,t)=>n(void 0,void 0,void 0,(function*(){return i.info("hello"),{statusCode:200}}))},1414:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.baseToAwsResult=t.awsToBaseContext=t.awsToBaseEvent=void 0,t.awsToBaseEvent=e=>({body:e.body,cookies:e.cookies,queryStrings:e.queryStringParameters,headers:e.headers,pathParameters:e.pathParameters}),t.awsToBaseContext=e=>({}),t.baseToAwsResult=e=>({statusCode:e.statusCode,headers:e.headers,body:e.body,cookies:e.cookies})},1833:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Logger=void 0;const i=n(r(5439)),s=i.default.createLogger({format:i.default.format.json(),transports:[new i.default.transports.Console]});t.Logger=class{constructor(e){this.loggerName=e,this.childLogger=s.child({loggerName:this.loggerName})}info(e){this.childLogger.info(e)}}},4300:e=>{"use strict";e.exports=require("buffer")},2361:e=>{"use strict";e.exports=require("events")},7147:e=>{"use strict";e.exports=require("fs")},3685:e=>{"use strict";e.exports=require("http")},5687:e=>{"use strict";e.exports=require("https")},2037:e=>{"use strict";e.exports=require("os")},1017:e=>{"use strict";e.exports=require("path")},2781:e=>{"use strict";e.exports=require("stream")},1576:e=>{"use strict";e.exports=require("string_decoder")},3837:e=>{"use strict";e.exports=require("util")},9796:e=>{"use strict";e.exports=require("zlib")},8380:e=>{"use strict";e.exports={version:"3.6.0"}}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n=r(5759),i=exports;for(var s in n)i[s]=n[s];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,